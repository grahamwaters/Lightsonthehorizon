[
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "DBSCAN",
        "importPath": "sklearn.cluster",
        "description": "sklearn.cluster",
        "isExtraImport": true,
        "detail": "sklearn.cluster",
        "documentation": {}
    },
    {
        "label": "silhouette_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "calinski_harabasz_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "NearestNeighbors",
        "importPath": "sklearn.neighbors",
        "description": "sklearn.neighbors",
        "isExtraImport": true,
        "detail": "sklearn.neighbors",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "pdist",
        "importPath": "scipy.spatial.distance",
        "description": "scipy.spatial.distance",
        "isExtraImport": true,
        "detail": "scipy.spatial.distance",
        "documentation": {}
    },
    {
        "label": "squareform",
        "importPath": "scipy.spatial.distance",
        "description": "scipy.spatial.distance",
        "isExtraImport": true,
        "detail": "scipy.spatial.distance",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "df = pd.read_csv(\"./project_folder/data/processed/ufos_processed.csv\", low_memory=False, on_bad_lines= 'skip')\n# Convert the latitude and longitude to radians\ndf['latitude_rad'] = np.radians(df['latitude'])\ndf['longitude_rad'] = np.radians(df['longitude'])\n# Convert the latitude and longitude to cartesian coordinates\ndf['x'] = np.cos(df['latitude_rad']) * np.cos(df['longitude_rad']) # x = r * cos(lat) * cos(long)\ndf['y'] = np.cos(df['latitude_rad']) * np.sin(df['longitude_rad']) # y = r * cos(lat) * sin(long)\ndf['z'] = np.sin(df['latitude_rad']) # z = r * sin(lat)\n# Create a matrix of the x, y, and z coordinates\nX = df[['x', 'y', 'z']].values",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "df['latitude_rad']",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "df['latitude_rad'] = np.radians(df['latitude'])\ndf['longitude_rad'] = np.radians(df['longitude'])\n# Convert the latitude and longitude to cartesian coordinates\ndf['x'] = np.cos(df['latitude_rad']) * np.cos(df['longitude_rad']) # x = r * cos(lat) * cos(long)\ndf['y'] = np.cos(df['latitude_rad']) * np.sin(df['longitude_rad']) # y = r * cos(lat) * sin(long)\ndf['z'] = np.sin(df['latitude_rad']) # z = r * sin(lat)\n# Create a matrix of the x, y, and z coordinates\nX = df[['x', 'y', 'z']].values\nprint(f'The shape of the matrix is: {X.shape}')\n# Scale the data to have a mean of 0 and a standard deviation of 1",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "df['longitude_rad']",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "df['longitude_rad'] = np.radians(df['longitude'])\n# Convert the latitude and longitude to cartesian coordinates\ndf['x'] = np.cos(df['latitude_rad']) * np.cos(df['longitude_rad']) # x = r * cos(lat) * cos(long)\ndf['y'] = np.cos(df['latitude_rad']) * np.sin(df['longitude_rad']) # y = r * cos(lat) * sin(long)\ndf['z'] = np.sin(df['latitude_rad']) # z = r * sin(lat)\n# Create a matrix of the x, y, and z coordinates\nX = df[['x', 'y', 'z']].values\nprint(f'The shape of the matrix is: {X.shape}')\n# Scale the data to have a mean of 0 and a standard deviation of 1\nscaler = StandardScaler()",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "df['x']",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "df['x'] = np.cos(df['latitude_rad']) * np.cos(df['longitude_rad']) # x = r * cos(lat) * cos(long)\ndf['y'] = np.cos(df['latitude_rad']) * np.sin(df['longitude_rad']) # y = r * cos(lat) * sin(long)\ndf['z'] = np.sin(df['latitude_rad']) # z = r * sin(lat)\n# Create a matrix of the x, y, and z coordinates\nX = df[['x', 'y', 'z']].values\nprint(f'The shape of the matrix is: {X.shape}')\n# Scale the data to have a mean of 0 and a standard deviation of 1\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\nprint(f'Calculating the distance matrix...')",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "df['y']",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "df['y'] = np.cos(df['latitude_rad']) * np.sin(df['longitude_rad']) # y = r * cos(lat) * sin(long)\ndf['z'] = np.sin(df['latitude_rad']) # z = r * sin(lat)\n# Create a matrix of the x, y, and z coordinates\nX = df[['x', 'y', 'z']].values\nprint(f'The shape of the matrix is: {X.shape}')\n# Scale the data to have a mean of 0 and a standard deviation of 1\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\nprint(f'Calculating the distance matrix...')\n# Calculate the condensed distance matrix",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "df['z']",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "df['z'] = np.sin(df['latitude_rad']) # z = r * sin(lat)\n# Create a matrix of the x, y, and z coordinates\nX = df[['x', 'y', 'z']].values\nprint(f'The shape of the matrix is: {X.shape}')\n# Scale the data to have a mean of 0 and a standard deviation of 1\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\nprint(f'Calculating the distance matrix...')\n# Calculate the condensed distance matrix\ndistances = pdist(X_scaled)",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "X = df[['x', 'y', 'z']].values\nprint(f'The shape of the matrix is: {X.shape}')\n# Scale the data to have a mean of 0 and a standard deviation of 1\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\nprint(f'Calculating the distance matrix...')\n# Calculate the condensed distance matrix\ndistances = pdist(X_scaled)\n# Calculate the distance to the kth nearest neighbor for each point\nk = 5",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "scaler",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "scaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\nprint(f'Calculating the distance matrix...')\n# Calculate the condensed distance matrix\ndistances = pdist(X_scaled)\n# Calculate the distance to the kth nearest neighbor for each point\nk = 5\nprint(f'Calculating the distance to the {k}th nearest neighbor for each point...')\nneigh = NearestNeighbors(n_neighbors=k)\nnbrs = neigh.fit(X_scaled)",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "X_scaled",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "X_scaled = scaler.fit_transform(X)\nprint(f'Calculating the distance matrix...')\n# Calculate the condensed distance matrix\ndistances = pdist(X_scaled)\n# Calculate the distance to the kth nearest neighbor for each point\nk = 5\nprint(f'Calculating the distance to the {k}th nearest neighbor for each point...')\nneigh = NearestNeighbors(n_neighbors=k)\nnbrs = neigh.fit(X_scaled)\ndistances_k, indices_k = nbrs.kneighbors(X_scaled)",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "distances",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "distances = pdist(X_scaled)\n# Calculate the distance to the kth nearest neighbor for each point\nk = 5\nprint(f'Calculating the distance to the {k}th nearest neighbor for each point...')\nneigh = NearestNeighbors(n_neighbors=k)\nnbrs = neigh.fit(X_scaled)\ndistances_k, indices_k = nbrs.kneighbors(X_scaled)\ndistances_k = distances_k[:, k-1]\n# Plot a histogram of the distances to the kth nearest neighbor\nplt.hist(distances_k, bins=50)",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "k = 5\nprint(f'Calculating the distance to the {k}th nearest neighbor for each point...')\nneigh = NearestNeighbors(n_neighbors=k)\nnbrs = neigh.fit(X_scaled)\ndistances_k, indices_k = nbrs.kneighbors(X_scaled)\ndistances_k = distances_k[:, k-1]\n# Plot a histogram of the distances to the kth nearest neighbor\nplt.hist(distances_k, bins=50)\nplt.xlabel('Distance')\nplt.ylabel('Frequency')",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "neigh",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "neigh = NearestNeighbors(n_neighbors=k)\nnbrs = neigh.fit(X_scaled)\ndistances_k, indices_k = nbrs.kneighbors(X_scaled)\ndistances_k = distances_k[:, k-1]\n# Plot a histogram of the distances to the kth nearest neighbor\nplt.hist(distances_k, bins=50)\nplt.xlabel('Distance')\nplt.ylabel('Frequency')\nplt.title('Histogram of Distances to the 5th Nearest Neighbors')\n# save the figure as a .png file in the project_folder/reports folder with the name 'knn_histogram.png'",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "nbrs",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "nbrs = neigh.fit(X_scaled)\ndistances_k, indices_k = nbrs.kneighbors(X_scaled)\ndistances_k = distances_k[:, k-1]\n# Plot a histogram of the distances to the kth nearest neighbor\nplt.hist(distances_k, bins=50)\nplt.xlabel('Distance')\nplt.ylabel('Frequency')\nplt.title('Histogram of Distances to the 5th Nearest Neighbors')\n# save the figure as a .png file in the project_folder/reports folder with the name 'knn_histogram.png'\nplt.savefig('./project_folder/reports/knn_histogram.png')",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "distances_k",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "distances_k = distances_k[:, k-1]\n# Plot a histogram of the distances to the kth nearest neighbor\nplt.hist(distances_k, bins=50)\nplt.xlabel('Distance')\nplt.ylabel('Frequency')\nplt.title('Histogram of Distances to the 5th Nearest Neighbors')\n# save the figure as a .png file in the project_folder/reports folder with the name 'knn_histogram.png'\nplt.savefig('./project_folder/reports/knn_histogram.png')\nplt.show()\n# Choose a value for eps",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "eps",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "eps = 0.5\n# Run the DBSCAN algorithm\ndb = DBSCAN(eps=eps, min_samples=2, metric='precomputed')\ndb.fit(squareform(distances))\n# Calculate the silhouette score\nscore = silhouette_score(squareform(distances), db.labels_)\n# Calculate the Calinski-Harabasz score\nscore = calinski_harabasz_score(squareform(distances), db.labels_)\n# Print the cluster labels\nprint(db.labels_)",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "db = DBSCAN(eps=eps, min_samples=2, metric='precomputed')\ndb.fit(squareform(distances))\n# Calculate the silhouette score\nscore = silhouette_score(squareform(distances), db.labels_)\n# Calculate the Calinski-Harabasz score\nscore = calinski_harabasz_score(squareform(distances), db.labels_)\n# Print the cluster labels\nprint(db.labels_)",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "score",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "score = silhouette_score(squareform(distances), db.labels_)\n# Calculate the Calinski-Harabasz score\nscore = calinski_harabasz_score(squareform(distances), db.labels_)\n# Print the cluster labels\nprint(db.labels_)",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "score",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "score = calinski_harabasz_score(squareform(distances), db.labels_)\n# Print the cluster labels\nprint(db.labels_)",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "create_folder_structure",
        "kind": 2,
        "importPath": "project_setup",
        "description": "project_setup",
        "peekOfCode": "def create_folder_structure():\n    project_folder = 'project_folder'\n    data_folder = 'data'\n    raw_folder = 'raw'\n    processed_folder = 'processed'\n    external_folder = 'external'\n    models_folder = 'models'\n    notebooks_folder = 'notebooks'\n    reports_folder = 'reports'\n    src_folder = 'src'",
        "detail": "project_setup",
        "documentation": {}
    }
]