[
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm_gui",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm_gui",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm_gui",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "fileinput",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fileinput",
        "description": "fileinput",
        "detail": "fileinput",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "Select",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "Select",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "icecream",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "icecream",
        "description": "icecream",
        "detail": "icecream",
        "documentation": {}
    },
    {
        "label": "ic",
        "importPath": "icecream",
        "description": "icecream",
        "isExtraImport": true,
        "detail": "icecream",
        "documentation": {}
    },
    {
        "label": "ic",
        "importPath": "icecream",
        "description": "icecream",
        "isExtraImport": true,
        "detail": "icecream",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "HTTPError",
        "importPath": "urllib3.exceptions",
        "description": "urllib3.exceptions",
        "isExtraImport": true,
        "detail": "urllib3.exceptions",
        "documentation": {}
    },
    {
        "label": "HTTPError",
        "importPath": "urllib3.exceptions",
        "description": "urllib3.exceptions",
        "isExtraImport": true,
        "detail": "urllib3.exceptions",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "ActionChains",
        "importPath": "selenium.webdriver.common.action_chains",
        "description": "selenium.webdriver.common.action_chains",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.action_chains",
        "documentation": {}
    },
    {
        "label": "ActionChains",
        "importPath": "selenium.webdriver.common.action_chains",
        "description": "selenium.webdriver.common.action_chains",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.action_chains",
        "documentation": {}
    },
    {
        "label": "ActionChains",
        "importPath": "selenium.webdriver.common.action_chains",
        "description": "selenium.webdriver.common.action_chains",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.action_chains",
        "documentation": {}
    },
    {
        "label": "ActionChains",
        "importPath": "selenium.webdriver.common.action_chains",
        "description": "selenium.webdriver.common.action_chains",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.action_chains",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "InvalidSchema",
        "importPath": "requests.exceptions",
        "description": "requests.exceptions",
        "isExtraImport": true,
        "detail": "requests.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidSchema",
        "importPath": "requests.exceptions",
        "description": "requests.exceptions",
        "isExtraImport": true,
        "detail": "requests.exceptions",
        "documentation": {}
    },
    {
        "label": "PorterStemmer",
        "importPath": "nltk.stem",
        "description": "nltk.stem",
        "isExtraImport": true,
        "detail": "nltk.stem",
        "documentation": {}
    },
    {
        "label": "PorterStemmer",
        "importPath": "nltk.stem",
        "description": "nltk.stem",
        "isExtraImport": true,
        "detail": "nltk.stem",
        "documentation": {}
    },
    {
        "label": "sent_tokenize",
        "importPath": "nltk.tokenize",
        "description": "nltk.tokenize",
        "isExtraImport": true,
        "detail": "nltk.tokenize",
        "documentation": {}
    },
    {
        "label": "word_tokenize",
        "importPath": "nltk.tokenize",
        "description": "nltk.tokenize",
        "isExtraImport": true,
        "detail": "nltk.tokenize",
        "documentation": {}
    },
    {
        "label": "word_tokenize",
        "importPath": "nltk.tokenize",
        "description": "nltk.tokenize",
        "isExtraImport": true,
        "detail": "nltk.tokenize",
        "documentation": {}
    },
    {
        "label": "sent_tokenize",
        "importPath": "nltk.tokenize",
        "description": "nltk.tokenize",
        "isExtraImport": true,
        "detail": "nltk.tokenize",
        "documentation": {}
    },
    {
        "label": "sent_tokenize",
        "importPath": "nltk.tokenize",
        "description": "nltk.tokenize",
        "isExtraImport": true,
        "detail": "nltk.tokenize",
        "documentation": {}
    },
    {
        "label": "word_tokenize",
        "importPath": "nltk.tokenize",
        "description": "nltk.tokenize",
        "isExtraImport": true,
        "detail": "nltk.tokenize",
        "documentation": {}
    },
    {
        "label": "word_tokenize",
        "importPath": "nltk.tokenize",
        "description": "nltk.tokenize",
        "isExtraImport": true,
        "detail": "nltk.tokenize",
        "documentation": {}
    },
    {
        "label": "sent_tokenize",
        "importPath": "nltk.tokenize",
        "description": "nltk.tokenize",
        "isExtraImport": true,
        "detail": "nltk.tokenize",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "NoSuchElementException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "NoSuchFrameException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "StaleElementReferenceException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidArgumentException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "WebDriverException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "NoAlertPresentException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "NoSuchElementException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "NoSuchFrameException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "StaleElementReferenceException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidArgumentException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "WebDriverException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "NoAlertPresentException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "WebElement",
        "importPath": "selenium.webdriver.remote.webdriver",
        "description": "selenium.webdriver.remote.webdriver",
        "isExtraImport": true,
        "detail": "selenium.webdriver.remote.webdriver",
        "documentation": {}
    },
    {
        "label": "WebElement",
        "importPath": "selenium.webdriver.remote.webdriver",
        "description": "selenium.webdriver.remote.webdriver",
        "isExtraImport": true,
        "detail": "selenium.webdriver.remote.webdriver",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "Article",
        "importPath": "newspaper",
        "description": "newspaper",
        "isExtraImport": true,
        "detail": "newspaper",
        "documentation": {}
    },
    {
        "label": "Article",
        "importPath": "newspaper",
        "description": "newspaper",
        "isExtraImport": true,
        "detail": "newspaper",
        "documentation": {}
    },
    {
        "label": "Source",
        "importPath": "newspaper",
        "description": "newspaper",
        "isExtraImport": true,
        "detail": "newspaper",
        "documentation": {}
    },
    {
        "label": "news_pool",
        "importPath": "newspaper",
        "description": "newspaper",
        "isExtraImport": true,
        "detail": "newspaper",
        "documentation": {}
    },
    {
        "label": "Article",
        "importPath": "newspaper",
        "description": "newspaper",
        "isExtraImport": true,
        "detail": "newspaper",
        "documentation": {}
    },
    {
        "label": "Article",
        "importPath": "newspaper",
        "description": "newspaper",
        "isExtraImport": true,
        "detail": "newspaper",
        "documentation": {}
    },
    {
        "label": "Source",
        "importPath": "newspaper",
        "description": "newspaper",
        "isExtraImport": true,
        "detail": "newspaper",
        "documentation": {}
    },
    {
        "label": "news_pool",
        "importPath": "newspaper",
        "description": "newspaper",
        "isExtraImport": true,
        "detail": "newspaper",
        "documentation": {}
    },
    {
        "label": "ActionChains",
        "importPath": "selenium.webdriver",
        "description": "selenium.webdriver",
        "isExtraImport": true,
        "detail": "selenium.webdriver",
        "documentation": {}
    },
    {
        "label": "ActionChains",
        "importPath": "selenium.webdriver",
        "description": "selenium.webdriver",
        "isExtraImport": true,
        "detail": "selenium.webdriver",
        "documentation": {}
    },
    {
        "label": "urllib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib",
        "description": "urllib",
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "htmldom",
        "importPath": "htmldom",
        "description": "htmldom",
        "isExtraImport": true,
        "detail": "htmldom",
        "documentation": {}
    },
    {
        "label": "htmldom",
        "importPath": "htmldom",
        "description": "htmldom",
        "isExtraImport": true,
        "detail": "htmldom",
        "documentation": {}
    },
    {
        "label": "urllib.request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request",
        "description": "urllib.request",
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "urllib.request,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request.",
        "description": "urllib.request.",
        "detail": "urllib.request.",
        "documentation": {}
    },
    {
        "label": "nltk",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nltk",
        "description": "nltk",
        "detail": "nltk",
        "documentation": {}
    },
    {
        "label": "Levenshtein",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "Levenshtein",
        "description": "Levenshtein",
        "detail": "Levenshtein",
        "documentation": {}
    },
    {
        "label": "cosine_similarity",
        "importPath": "sklearn.metrics.pairwise",
        "description": "sklearn.metrics.pairwise",
        "isExtraImport": true,
        "detail": "sklearn.metrics.pairwise",
        "documentation": {}
    },
    {
        "label": "cosine_similarity",
        "importPath": "sklearn.metrics.pairwise",
        "description": "sklearn.metrics.pairwise",
        "isExtraImport": true,
        "detail": "sklearn.metrics.pairwise",
        "documentation": {}
    },
    {
        "label": "CountVectorizer",
        "importPath": "sklearn.feature_extraction.text",
        "description": "sklearn.feature_extraction.text",
        "isExtraImport": true,
        "detail": "sklearn.feature_extraction.text",
        "documentation": {}
    },
    {
        "label": "CountVectorizer",
        "importPath": "sklearn.feature_extraction.text",
        "description": "sklearn.feature_extraction.text",
        "isExtraImport": true,
        "detail": "sklearn.feature_extraction.text",
        "documentation": {}
    },
    {
        "label": "stopwords",
        "importPath": "nltk.corpus",
        "description": "nltk.corpus",
        "isExtraImport": true,
        "detail": "nltk.corpus",
        "documentation": {}
    },
    {
        "label": "stopwords",
        "importPath": "nltk.corpus",
        "description": "nltk.corpus",
        "isExtraImport": true,
        "detail": "nltk.corpus",
        "documentation": {}
    },
    {
        "label": "RateLimiter",
        "importPath": "geopy.extra.rate_limiter",
        "description": "geopy.extra.rate_limiter",
        "isExtraImport": true,
        "detail": "geopy.extra.rate_limiter",
        "documentation": {}
    },
    {
        "label": "RateLimiter",
        "importPath": "geopy.extra.rate_limiter",
        "description": "geopy.extra.rate_limiter",
        "isExtraImport": true,
        "detail": "geopy.extra.rate_limiter",
        "documentation": {}
    },
    {
        "label": "Nominatim",
        "importPath": "geopy.geocoders",
        "description": "geopy.geocoders",
        "isExtraImport": true,
        "detail": "geopy.geocoders",
        "documentation": {}
    },
    {
        "label": "Nominatim",
        "importPath": "geopy.geocoders",
        "description": "geopy.geocoders",
        "isExtraImport": true,
        "detail": "geopy.geocoders",
        "documentation": {}
    },
    {
        "label": "geodesic",
        "importPath": "geopy.distance",
        "description": "geopy.distance",
        "isExtraImport": true,
        "detail": "geopy.distance",
        "documentation": {}
    },
    {
        "label": "geodesic",
        "importPath": "geopy.distance",
        "description": "geopy.distance",
        "isExtraImport": true,
        "detail": "geopy.distance",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "DBSCAN",
        "importPath": "sklearn.cluster",
        "description": "sklearn.cluster",
        "isExtraImport": true,
        "detail": "sklearn.cluster",
        "documentation": {}
    },
    {
        "label": "silhouette_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "calinski_harabasz_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "NearestNeighbors",
        "importPath": "sklearn.neighbors",
        "description": "sklearn.neighbors",
        "isExtraImport": true,
        "detail": "sklearn.neighbors",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "pdist",
        "importPath": "scipy.spatial.distance",
        "description": "scipy.spatial.distance",
        "isExtraImport": true,
        "detail": "scipy.spatial.distance",
        "documentation": {}
    },
    {
        "label": "squareform",
        "importPath": "scipy.spatial.distance",
        "description": "scipy.spatial.distance",
        "isExtraImport": true,
        "detail": "scipy.spatial.distance",
        "documentation": {}
    },
    {
        "label": "scrollment",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def scrollment():\n    ic()\n    '''\n    readme\n    scrolls down one page length to see invisible content.\n    '''\n    driver.execute_script(\"window.scrollTo(0,document.body.scrollHeight-1)\")\ndef shifty(bottom,top):\n    ic()\n    #ic(bottom)",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "shifty",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def shifty(bottom,top):\n    ic()\n    #ic(bottom)\n    #ic(top)\n    temp = 0 # init\n    if bottom > top:\n        temp = top\n        top = bottom\n        bottom = temp\n    #makes lifelike shifts",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "xpathcreator",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def xpathcreator(frontend,iterator,backend):\n    ic()\n    xpaths_array = []\n    fullxpath = \"\"\n    '''for i in range(int(iter_start),int(iter_end)):\n        fullxpath = frontend + str(i) + backend\n        xpaths_array.append(fullxpath)\n        fullxpath = frontend + str(i) + backend'''\n    if fullxpath == \"\":\n        fullxpath = frontend + str(iterator) + backend",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "xfiles_spyder",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def xfiles_spyder():\n    ic()\n    # this is the path to your firefox driver file\n    firefox_driver = \"/Users/GrahamAtWork/Documents/firefoxdriver\"\n    driver = webdriver.Firefox()\n    url = \"http://www.insidethex.co.uk/\"\n    print(\"Beginning the program sequence: \",end=\"\")\n    driver.get(url)\n    print(url)\n    #search page variables",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "ancient_aliens_spyder",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def ancient_aliens_spyder():\n    ic()\n    #extract any transcripts you can from this website for ancient aliens\n    # this is the path to your firefox driver file\n    firefox_driver = \"/Users/GrahamAtWork/Documents/firefoxdriver\"\n    driver = webdriver.Firefox()\n    url = \"https://subslikescript.com/series/Ancient_Aliens-1643266\"\n    print(\"Beginning the program sequence: \",end=\"\")\n    driver.get(url)\n    #search page variables",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "cosine_sim_vectors",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def cosine_sim_vectors(vec1,vec2):\n    '''\n    This function has been reproduced from the source below:\n    Radečić, D. (2019, October 30). Calculating String Similarity in Python. Medium. https://towardsdatascience.com/calculating-string-similarity-in-python-276e18a7d33a\n    '''\n    ic()\n    vec1 = vec1.reshape(1,-1)\n    vec2 = vec2.reshape(1,-1)\n    return cosine_similarity(vec1,vec2)[0][0]\ndef clean_string(text):",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "clean_string",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def clean_string(text):\n    '''\n    This code has been adapted from the source below:\n    Radečić, D. (2019, October 30). Calculating String Similarity in Python. Medium. https://towardsdatascience.com/calculating-string-similarity-in-python-276e18a7d33a\n    '''\n    ic()\n    try:\n        text = ''.join([word for word in text if word not in string.digits])\n    except TypeError:\n        text = \"N/A\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "Levenshtein_Similarity",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def Levenshtein_Similarity(phrases):\n    '''\n    This code has been adapted from the source below:\n    Radečić, D. (2019, October 30). Calculating String Similarity in Python. Medium. https://towardsdatascience.com/calculating-string-similarity-in-python-276e18a7d33a\n    ADAPTATIONS\n    phrases is passed to the function and x number of phrases are analyzed to determine their similarity scores.\n    this can be iterated to find the most similar reports.\n    '''\n    ic()\n    from nltk.corpus import stopwords",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "my_next_step",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def my_next_step(driver):\n    ic()\n    driver.refresh()\n    time.sleep(10)\n    element=driver.switch_to_frame('iframe')\ndef wordstemmer(description_string):\n    ic()\n    # will be used to find the stems of the words in all comments\n    words = description_string.split(\" \")# extract all words from the string\n    print(words)",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "wordstemmer",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def wordstemmer(description_string):\n    ic()\n    # will be used to find the stems of the words in all comments\n    words = description_string.split(\" \")# extract all words from the string\n    print(words)\n    ps = PorterStemmer()\n    for word in words:\n        print(ps.stem(word))\ndef transcript_parser(transcript_file,heading_text):\n    '''",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "transcript_parser",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def transcript_parser(transcript_file,heading_text):\n    '''\n    README\n    transcript_file contains \"file_name.txt\" for example as a string.\n    newfilename = \"Scrubbed_\" added to the filename and will be saved as a txt file\n    heading_text should contain text that recurrs in the text file as a heading that you want\n    to split into sep. records.\n    '''\n    ic()\n    heading_text = str(heading_text) # data validation step",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "initializer",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def initializer(download_choice,scrape_more):\n    '''\n        README\n            scrape_more can either be Y, y, N, or True\n            download_choice is to download the xfiles again as well as ancient aliens\n    '''\n    ic()\n    #ic(download_choice)\n    #ic(scrape_more)\n    if download_choice == True:",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "selenium_crawler",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def selenium_crawler(topic,city,states,mainhotspots,citiestoavoid):\n    PRESET_VARIABLE_MAX = 30\n    '''mufon_file = open(\"MUFON_Database_Scraped_Reports.txt\",'a+') #opening text file in append mode\n    mufon_file.write(timestamp_string)\n    mufon_file.close() # save progress in the file and reopen it later'''\n    topic\n    #search page variables\n    from MUFONVARIABLES import nearest_city_field_x\n    from MUFONVARIABLES import event_stateusa_x\n    from MUFONVARIABLES import keywordfield_x",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "corpora_sherlock",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def corpora_sherlock(text_file,delimeter_used):\n    '''\n        README\n            takes in a text file and creates a csv file\n            (textfile,delimeter_used) for this case will be 'ø' this is option + o\n    '''\n    ic()\n    newfilename = \"\" #init\n    myfile = open(text_file,'r') # open transcript read only\n    newfilename = \"MUFON_Sherlocked_\" + text_file",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "convert_csv_to_dict",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def convert_csv_to_dict(filename):\n    ic()\n    #adapted from reading and writing CSV Files in Python Website\n    import csv\n    csv_reader = csv.DictReader(csv_file)\n    line_count = 0\n    for row in csv_reader:\n        if line_count == 0:\n            print(f'Column names are {\", \".join(row)}')\n            line_count += 1",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "convert_csv_to_pandas",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def convert_csv_to_pandas(filename,indexcolumn):\n    ic()\n    #df = pandas.read_csv(filename)\n    df = pd.read_csv(filename, index_col=indexcolumn)\n    return df\ndef write_to_csv_from_pandas(df_name,new_file_name):\n    ic()\n    import pandas\n    #ic(\"NOT COMPLETED YET... CHECK THIS FUNCTION BEFORE IMPLEMENTATION\")\n    df = pandas.read_csv('hrdata.csv',",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "write_to_csv_from_pandas",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def write_to_csv_from_pandas(df_name,new_file_name):\n    ic()\n    import pandas\n    #ic(\"NOT COMPLETED YET... CHECK THIS FUNCTION BEFORE IMPLEMENTATION\")\n    df = pandas.read_csv('hrdata.csv',\n                index_col='Employee',\n                parse_dates=['Hired'],\n                header=0,\n                names=['Employee', 'Hired', 'Salary', 'Sick Days'])\n    newfilename += \".csv\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "finding_nemopolis_old",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def finding_nemopolis_old(city_name,state_name,cities_df,cities2_df):\n    ic()\n    #test dictionary\n    #print(\"testing Austin,TX in df: \",end=\"\")\n    # Check whether city is in the dictionary and print feedback\n    #first check main one\n    from operator import indexOf\n    Mode2 = False #state id mode\n    if len(state_name) == 2:\n        Mode2 = True",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "chasm_between",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def chasm_between(point1,point2):\n    ic()\n    import geopy.distance\n    from geopy import distance\n    coords_1 = (point1[2], point1[3])\n    coords_2 = (point2[2], point2[3])\n    dist = geopy.distance.distance(coords_1, coords_2).mi\n    return dist\n#todo julian date converter (complete)\ndef tojulian(day,month,year):",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "tojulian",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def tojulian(day,month,year):\n    '''\n    README\n        dd/mm/yyyy\n    '''\n    ic()\n    #* https://stackoverflow.com/questions/13943062/extract-day-of-year-and-julian-day-from-a-string-date\n    import datetime\n    import jdcal\n    fmt = '%m.%d.%Y'",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "city_finder",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def city_finder(city_name,state_name):\n    #coordinates data provided by https://simplemaps.com/data/us-cities.\n    #see their website for more details.\n    #finds coordinates of city\n    '''geolocator = Nominatim(user_agent=\"mufon_scanner\")\n    location = geolocator.geocode(\"175 5th Avenue NYC\")\n    print(location.address)\n    print((location.latitude, location.longitude))\n    print(location.raw)\n    #{'place_id': '9167009604', 'type': 'attraction', ...}",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "city_extraction",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def city_extraction(string):\n    ic()\n    string_spaces = 0\n    s_iters = []\n    string_commas = 0\n    c_iters = []\n    iterator = 0\n    for i in string:\n        if i == ' ':\n            string_spaces +=1",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "writetofile",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def writetofile(text,filename):\n    ic()\n    outfile = open(filename,'w+')\n    outfile.write(text)\n    outfile.close()\ndef city_cleaner(filename):\n    ic()\n    csv_data = pd.read_csv(filename)\n    #csv_data.head()\n    new_locations = []",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "city_cleaner",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def city_cleaner(filename):\n    ic()\n    csv_data = pd.read_csv(filename)\n    #csv_data.head()\n    new_locations = []\n    for location in csv_data['Location of Event']:\n        new_location = city_extraction(location)\n        #ic(new_location)\n        new_locations.append(new_location)\n    df = pd.read_csv(filename)",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "plotly_project",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def plotly_project():\n    ic()\n    #Final Project - RSAN 130 - Plotly Visualizations\n    import re\n    import string\n    import time\n    import os.path\n    import numpy as nmp\n    import numpy as np\n    import pandas as pd",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "city_csv_to_location",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def city_csv_to_location(filename):\n    ic()\n    coordinates_dict = {'Bogalusa/LA':['Bogalusa', 'LA', 30.7812, -89.8633]}\n    cities_df = convert_csv_to_pandas(\"MUFON_uscities.csv\",\"city\")\n    cities2_df = convert_csv_to_pandas(\"MUFON_2014_Cities_updated.csv\",\"city\")\n    cities_df.head()\n    csv_data = pd.read_csv(filename)\n    #csv_data.head()\n    new_locations = []\n    csv_data_states = []",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "save_dict_as_csvfile",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def save_dict_as_csvfile(dict_name):\n    ic()\n    filename = 'MUFON_' + str(\"dictionary\") + '.csv'\n    with open(filename, 'w+') as f:\n        for key in dict_name.keys():\n            f.write(\"%s,%s\\n\"%(key,dict_name[key]))\n#*coordinates = city_csv_to_location(\"citiestocheck.csv\")\n#*save_dict_as_csvfile(coordinates)\n#writetofile(coordinates,\"MUFON_dictionary_cities_locations.csv\")\n#ic()",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "Jones_Effect",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def Jones_Effect(point_x,dataset):\n    '''\n    README\n    Q is len(dataset)/(2) round down so for len(dataset) = 1203 the Q =  1203/2 = 601.5 round down to 601\n    find the Q closest points by longitude\n    find the Q closest points by latitude\n    find which points occur in both sets\n    get their distances\n    point_x = the dataframe below\n    Date/Time of Event  date posted city    state   country latitude    longitude   Description shape   duration (seconds)",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "geopy_city_to_coordinates",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def geopy_city_to_coordinates(cityname,statename):\n    '''\n    README\n    city name must be like \"Austin\"\n    statename must be in form \"Texas\"\n    no spaces they will be combined with space between them\n    '''\n    inputstring = cityname + \" \" + statename\n    from geopy.geocoders import Nominatim\n    geolocator = Nominatim(user_agent='myapplication')",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "finding_nemopolis",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def finding_nemopolis(city_name,state_name):\n    location_data = ['']\n    if len(state_name)>2:\n        location_data = geopy_city_to_coordinates(city_name,state_name)\n    else:\n        return location_data\n    return location_data # no coordinates found.\nresult = geopy_city_to_coordinates(\"Austin\",\"Texas\")\nvar = finding_nemopolis(\"Austin\",\"Texas\")\nic(var)",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "point_finder",
        "kind": 2,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "def point_finder(R_x,R_y):\n    '''\n    README\n    R_x =\n    R_y =\n    M_x =\n    M_y =\n    file headers are below\n    Source,Date/Time of Event,date posted,duration (seconds),city,state (ABBR),STATE(FULL),country,latitude,longitude ,comments,shape, ,,,\n    '''",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "maincontrols_tab_dateyear_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "maincontrols_tab_dateyear_id = \"date_year\"\nmaincontrols_tab_datemonth_id = \"date_month\"\nmaincontrols_tab_dateday_id = \"date_day\"\nmaincontrols_tab_time_hour_id = \"time_hour\"\nmaincontrols_tab_time_minute_id  = \"time_minute\"\nmaincontrols_tab_time_second_id = \"time_second\"\n#* field of view\nmaincontrols_tab_fieldofview_id = \"view_fov\"\n#* location tab\nlocation_tab_id = \"ui-id-21\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "maincontrols_tab_datemonth_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "maincontrols_tab_datemonth_id = \"date_month\"\nmaincontrols_tab_dateday_id = \"date_day\"\nmaincontrols_tab_time_hour_id = \"time_hour\"\nmaincontrols_tab_time_minute_id  = \"time_minute\"\nmaincontrols_tab_time_second_id = \"time_second\"\n#* field of view\nmaincontrols_tab_fieldofview_id = \"view_fov\"\n#* location tab\nlocation_tab_id = \"ui-id-21\"\nlocation_tab_latitude_id = \"loc_latitude\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "maincontrols_tab_dateday_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "maincontrols_tab_dateday_id = \"date_day\"\nmaincontrols_tab_time_hour_id = \"time_hour\"\nmaincontrols_tab_time_minute_id  = \"time_minute\"\nmaincontrols_tab_time_second_id = \"time_second\"\n#* field of view\nmaincontrols_tab_fieldofview_id = \"view_fov\"\n#* location tab\nlocation_tab_id = \"ui-id-21\"\nlocation_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "maincontrols_tab_time_hour_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "maincontrols_tab_time_hour_id = \"time_hour\"\nmaincontrols_tab_time_minute_id  = \"time_minute\"\nmaincontrols_tab_time_second_id = \"time_second\"\n#* field of view\nmaincontrols_tab_fieldofview_id = \"view_fov\"\n#* location tab\nlocation_tab_id = \"ui-id-21\"\nlocation_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "maincontrols_tab_time_second_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "maincontrols_tab_time_second_id = \"time_second\"\n#* field of view\nmaincontrols_tab_fieldofview_id = \"view_fov\"\n#* location tab\nlocation_tab_id = \"ui-id-21\"\nlocation_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"\n#* time jump tab",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "maincontrols_tab_fieldofview_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "maincontrols_tab_fieldofview_id = \"view_fov\"\n#* location tab\nlocation_tab_id = \"ui-id-21\"\nlocation_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"\n#* time jump tab\ntimejump_tab_id = \"ui-id-10\"\nlocation_tab_latitude_id = \"loc_latitude\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "location_tab_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "location_tab_id = \"ui-id-21\"\nlocation_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"\n#* time jump tab\ntimejump_tab_id = \"ui-id-10\"\nlocation_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "location_tab_latitude_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "location_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"\n#* time jump tab\ntimejump_tab_id = \"ui-id-10\"\nlocation_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "location_tab_longitude_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "location_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"\n#* time jump tab\ntimejump_tab_id = \"ui-id-10\"\nlocation_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"\n#selenium variable front/ends section",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "location_tab_altitude_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "location_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"\n#* time jump tab\ntimejump_tab_id = \"ui-id-10\"\nlocation_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"\n#selenium variable front/ends section\natmosphere_tab_id = \"ui-id-6\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "location_tab_name_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "location_tab_name_id = \"loc_name\"\n#* time jump tab\ntimejump_tab_id = \"ui-id-10\"\nlocation_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"\n#selenium variable front/ends section\natmosphere_tab_id = \"ui-id-6\"\nlightpollution_class = \"stelaction\" #click this to enable real light polution sim from location",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "timejump_tab_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "timejump_tab_id = \"ui-id-10\"\nlocation_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"\n#selenium variable front/ends section\natmosphere_tab_id = \"ui-id-6\"\nlightpollution_class = \"stelaction\" #click this to enable real light polution sim from location\n#* actions tab\nactions_tab_class = \"checkableaction\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "location_tab_latitude_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "location_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"\n#selenium variable front/ends section\natmosphere_tab_id = \"ui-id-6\"\nlightpollution_class = \"stelaction\" #click this to enable real light polution sim from location\n#* actions tab\nactions_tab_class = \"checkableaction\"\nactions_tab_datetime_value = \"actionShow_DateTime_Window_Global\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "location_tab_longitude_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "location_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"\n#selenium variable front/ends section\natmosphere_tab_id = \"ui-id-6\"\nlightpollution_class = \"stelaction\" #click this to enable real light polution sim from location\n#* actions tab\nactions_tab_class = \"checkableaction\"\nactions_tab_datetime_value = \"actionShow_DateTime_Window_Global\"\nactions_button_id = \"bt_doaction\" #click this to enable the above datetime value window.",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "location_tab_altitude_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "location_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"\n#selenium variable front/ends section\natmosphere_tab_id = \"ui-id-6\"\nlightpollution_class = \"stelaction\" #click this to enable real light polution sim from location\n#* actions tab\nactions_tab_class = \"checkableaction\"\nactions_tab_datetime_value = \"actionShow_DateTime_Window_Global\"\nactions_button_id = \"bt_doaction\" #click this to enable the above datetime value window.\nactions_optionvalue_update = \"actionRun_AstroCalc_UpdatePositions\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "location_tab_name_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "location_tab_name_id = \"loc_name\"\n#selenium variable front/ends section\natmosphere_tab_id = \"ui-id-6\"\nlightpollution_class = \"stelaction\" #click this to enable real light polution sim from location\n#* actions tab\nactions_tab_class = \"checkableaction\"\nactions_tab_datetime_value = \"actionShow_DateTime_Window_Global\"\nactions_button_id = \"bt_doaction\" #click this to enable the above datetime value window.\nactions_optionvalue_update = \"actionRun_AstroCalc_UpdatePositions\"\nactions_optionvalue_screenshot = \"actionSave_Screenshot_Global\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "atmosphere_tab_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "atmosphere_tab_id = \"ui-id-6\"\nlightpollution_class = \"stelaction\" #click this to enable real light polution sim from location\n#* actions tab\nactions_tab_class = \"checkableaction\"\nactions_tab_datetime_value = \"actionShow_DateTime_Window_Global\"\nactions_button_id = \"bt_doaction\" #click this to enable the above datetime value window.\nactions_optionvalue_update = \"actionRun_AstroCalc_UpdatePositions\"\nactions_optionvalue_screenshot = \"actionSave_Screenshot_Global\"\nactions_optionvalue_show_starlink = \"actionShow_Satellite_Group_starlink\"\nactions_optionvalue_show_militarysats = \"actionShow_Satellite_Group_military\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "lightpollution_class",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "lightpollution_class = \"stelaction\" #click this to enable real light polution sim from location\n#* actions tab\nactions_tab_class = \"checkableaction\"\nactions_tab_datetime_value = \"actionShow_DateTime_Window_Global\"\nactions_button_id = \"bt_doaction\" #click this to enable the above datetime value window.\nactions_optionvalue_update = \"actionRun_AstroCalc_UpdatePositions\"\nactions_optionvalue_screenshot = \"actionSave_Screenshot_Global\"\nactions_optionvalue_show_starlink = \"actionShow_Satellite_Group_starlink\"\nactions_optionvalue_show_militarysats = \"actionShow_Satellite_Group_military\"\naddict = {0:\"Date submitted\",",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "actions_tab_class",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "actions_tab_class = \"checkableaction\"\nactions_tab_datetime_value = \"actionShow_DateTime_Window_Global\"\nactions_button_id = \"bt_doaction\" #click this to enable the above datetime value window.\nactions_optionvalue_update = \"actionRun_AstroCalc_UpdatePositions\"\nactions_optionvalue_screenshot = \"actionSave_Screenshot_Global\"\nactions_optionvalue_show_starlink = \"actionShow_Satellite_Group_starlink\"\nactions_optionvalue_show_militarysats = \"actionShow_Satellite_Group_military\"\naddict = {0:\"Date submitted\",\n                1:\"Date/Time of Event\",\n                2:\"Short Description\",",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "actions_tab_datetime_value",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "actions_tab_datetime_value = \"actionShow_DateTime_Window_Global\"\nactions_button_id = \"bt_doaction\" #click this to enable the above datetime value window.\nactions_optionvalue_update = \"actionRun_AstroCalc_UpdatePositions\"\nactions_optionvalue_screenshot = \"actionSave_Screenshot_Global\"\nactions_optionvalue_show_starlink = \"actionShow_Satellite_Group_starlink\"\nactions_optionvalue_show_militarysats = \"actionShow_Satellite_Group_military\"\naddict = {0:\"Date submitted\",\n                1:\"Date/Time of Event\",\n                2:\"Short Description\",\n                3:\"Location of Event\",",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "actions_button_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "actions_button_id = \"bt_doaction\" #click this to enable the above datetime value window.\nactions_optionvalue_update = \"actionRun_AstroCalc_UpdatePositions\"\nactions_optionvalue_screenshot = \"actionSave_Screenshot_Global\"\nactions_optionvalue_show_starlink = \"actionShow_Satellite_Group_starlink\"\nactions_optionvalue_show_militarysats = \"actionShow_Satellite_Group_military\"\naddict = {0:\"Date submitted\",\n                1:\"Date/Time of Event\",\n                2:\"Short Description\",\n                3:\"Location of Event\",\n                4:\"Long Description\",",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "actions_optionvalue_update",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "actions_optionvalue_update = \"actionRun_AstroCalc_UpdatePositions\"\nactions_optionvalue_screenshot = \"actionSave_Screenshot_Global\"\nactions_optionvalue_show_starlink = \"actionShow_Satellite_Group_starlink\"\nactions_optionvalue_show_militarysats = \"actionShow_Satellite_Group_military\"\naddict = {0:\"Date submitted\",\n                1:\"Date/Time of Event\",\n                2:\"Short Description\",\n                3:\"Location of Event\",\n                4:\"Long Description\",\n                5:\"Attachments\"}",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "actions_optionvalue_screenshot",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "actions_optionvalue_screenshot = \"actionSave_Screenshot_Global\"\nactions_optionvalue_show_starlink = \"actionShow_Satellite_Group_starlink\"\nactions_optionvalue_show_militarysats = \"actionShow_Satellite_Group_military\"\naddict = {0:\"Date submitted\",\n                1:\"Date/Time of Event\",\n                2:\"Short Description\",\n                3:\"Location of Event\",\n                4:\"Long Description\",\n                5:\"Attachments\"}\nnearest_city_field_x = \"/html/body/center/div[2]/form/table/tbody/tr[8]/td[2]/input\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "actions_optionvalue_show_starlink",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "actions_optionvalue_show_starlink = \"actionShow_Satellite_Group_starlink\"\nactions_optionvalue_show_militarysats = \"actionShow_Satellite_Group_military\"\naddict = {0:\"Date submitted\",\n                1:\"Date/Time of Event\",\n                2:\"Short Description\",\n                3:\"Location of Event\",\n                4:\"Long Description\",\n                5:\"Attachments\"}\nnearest_city_field_x = \"/html/body/center/div[2]/form/table/tbody/tr[8]/td[2]/input\"\nevent_stateusa_x = '//*[@id=\"id_selbox_state_id\"]'",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "actions_optionvalue_show_militarysats",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "actions_optionvalue_show_militarysats = \"actionShow_Satellite_Group_military\"\naddict = {0:\"Date submitted\",\n                1:\"Date/Time of Event\",\n                2:\"Short Description\",\n                3:\"Location of Event\",\n                4:\"Long Description\",\n                5:\"Attachments\"}\nnearest_city_field_x = \"/html/body/center/div[2]/form/table/tbody/tr[8]/td[2]/input\"\nevent_stateusa_x = '//*[@id=\"id_selbox_state_id\"]'\ndescription_x_front = \"/html/body/center/form/table/tbody/tr[\" #starts at 3",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "addict",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "addict = {0:\"Date submitted\",\n                1:\"Date/Time of Event\",\n                2:\"Short Description\",\n                3:\"Location of Event\",\n                4:\"Long Description\",\n                5:\"Attachments\"}\nnearest_city_field_x = \"/html/body/center/div[2]/form/table/tbody/tr[8]/td[2]/input\"\nevent_stateusa_x = '//*[@id=\"id_selbox_state_id\"]'\ndescription_x_front = \"/html/body/center/form/table/tbody/tr[\" #starts at 3\ndate_sub_x_front = \"/html/body/center/form/table/tbody/tr[\"#starts at 3",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "nearest_city_field_x",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "nearest_city_field_x = \"/html/body/center/div[2]/form/table/tbody/tr[8]/td[2]/input\"\nevent_stateusa_x = '//*[@id=\"id_selbox_state_id\"]'\ndescription_x_front = \"/html/body/center/form/table/tbody/tr[\" #starts at 3\ndate_sub_x_front = \"/html/body/center/form/table/tbody/tr[\"#starts at 3\ndate_time_front = \"/html/body/center/form/table/tbody/tr[\" #starts at 3\nsdescr_front = \"/html/body/center/form/table/tbody/tr[\" # starts at 3\nlocation_of_event_front = \"/html/body/center/form/table/tbody/tr[\" #starts at 3\n#todo could be attachments... idk if you want them but here is the xpath\nattachments_front = \"/html/body/center/form/table/tbody/tr[\"# starts at 3\ndescription_css_front = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "event_stateusa_x",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "event_stateusa_x = '//*[@id=\"id_selbox_state_id\"]'\ndescription_x_front = \"/html/body/center/form/table/tbody/tr[\" #starts at 3\ndate_sub_x_front = \"/html/body/center/form/table/tbody/tr[\"#starts at 3\ndate_time_front = \"/html/body/center/form/table/tbody/tr[\" #starts at 3\nsdescr_front = \"/html/body/center/form/table/tbody/tr[\" # starts at 3\nlocation_of_event_front = \"/html/body/center/form/table/tbody/tr[\" #starts at 3\n#todo could be attachments... idk if you want them but here is the xpath\nattachments_front = \"/html/body/center/form/table/tbody/tr[\"# starts at 3\ndescription_css_front = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(\"\ndescription_css_end = \") > td:nth-child(6) > input:nth-child(1)\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "description_x_front",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "description_x_front = \"/html/body/center/form/table/tbody/tr[\" #starts at 3\ndate_sub_x_front = \"/html/body/center/form/table/tbody/tr[\"#starts at 3\ndate_time_front = \"/html/body/center/form/table/tbody/tr[\" #starts at 3\nsdescr_front = \"/html/body/center/form/table/tbody/tr[\" # starts at 3\nlocation_of_event_front = \"/html/body/center/form/table/tbody/tr[\" #starts at 3\n#todo could be attachments... idk if you want them but here is the xpath\nattachments_front = \"/html/body/center/form/table/tbody/tr[\"# starts at 3\ndescription_css_front = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(\"\ndescription_css_end = \") > td:nth-child(6) > input:nth-child(1)\"\n#body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(3) > td:nth-child(6) > input:nth-child(1)",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "date_sub_x_front",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "date_sub_x_front = \"/html/body/center/form/table/tbody/tr[\"#starts at 3\ndate_time_front = \"/html/body/center/form/table/tbody/tr[\" #starts at 3\nsdescr_front = \"/html/body/center/form/table/tbody/tr[\" # starts at 3\nlocation_of_event_front = \"/html/body/center/form/table/tbody/tr[\" #starts at 3\n#todo could be attachments... idk if you want them but here is the xpath\nattachments_front = \"/html/body/center/form/table/tbody/tr[\"# starts at 3\ndescription_css_front = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(\"\ndescription_css_end = \") > td:nth-child(6) > input:nth-child(1)\"\n#body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(3) > td:nth-child(6) > input:nth-child(1)\ndescription_x_end = \"]/td[6]/input\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "date_time_front",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "date_time_front = \"/html/body/center/form/table/tbody/tr[\" #starts at 3\nsdescr_front = \"/html/body/center/form/table/tbody/tr[\" # starts at 3\nlocation_of_event_front = \"/html/body/center/form/table/tbody/tr[\" #starts at 3\n#todo could be attachments... idk if you want them but here is the xpath\nattachments_front = \"/html/body/center/form/table/tbody/tr[\"# starts at 3\ndescription_css_front = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(\"\ndescription_css_end = \") > td:nth-child(6) > input:nth-child(1)\"\n#body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(3) > td:nth-child(6) > input:nth-child(1)\ndescription_x_end = \"]/td[6]/input\"\ndate_sub_x_end = \"]/td[2]\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "sdescr_front",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "sdescr_front = \"/html/body/center/form/table/tbody/tr[\" # starts at 3\nlocation_of_event_front = \"/html/body/center/form/table/tbody/tr[\" #starts at 3\n#todo could be attachments... idk if you want them but here is the xpath\nattachments_front = \"/html/body/center/form/table/tbody/tr[\"# starts at 3\ndescription_css_front = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(\"\ndescription_css_end = \") > td:nth-child(6) > input:nth-child(1)\"\n#body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(3) > td:nth-child(6) > input:nth-child(1)\ndescription_x_end = \"]/td[6]/input\"\ndate_sub_x_end = \"]/td[2]\"\ndate_time_end = \"]/td[3]\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "location_of_event_front",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "location_of_event_front = \"/html/body/center/form/table/tbody/tr[\" #starts at 3\n#todo could be attachments... idk if you want them but here is the xpath\nattachments_front = \"/html/body/center/form/table/tbody/tr[\"# starts at 3\ndescription_css_front = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(\"\ndescription_css_end = \") > td:nth-child(6) > input:nth-child(1)\"\n#body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(3) > td:nth-child(6) > input:nth-child(1)\ndescription_x_end = \"]/td[6]/input\"\ndate_sub_x_end = \"]/td[2]\"\ndate_time_end = \"]/td[3]\"\nsdescr_end = \"]/td[4]\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "attachments_front",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "attachments_front = \"/html/body/center/form/table/tbody/tr[\"# starts at 3\ndescription_css_front = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(\"\ndescription_css_end = \") > td:nth-child(6) > input:nth-child(1)\"\n#body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(3) > td:nth-child(6) > input:nth-child(1)\ndescription_x_end = \"]/td[6]/input\"\ndate_sub_x_end = \"]/td[2]\"\ndate_time_end = \"]/td[3]\"\nsdescr_end = \"]/td[4]\"\nlocation_of_event_end = \"]/td[5]\"\nattachments_end = \"]/td[7]\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "description_css_front",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "description_css_front = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(\"\ndescription_css_end = \") > td:nth-child(6) > input:nth-child(1)\"\n#body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(3) > td:nth-child(6) > input:nth-child(1)\ndescription_x_end = \"]/td[6]/input\"\ndate_sub_x_end = \"]/td[2]\"\ndate_time_end = \"]/td[3]\"\nsdescr_end = \"]/td[4]\"\nlocation_of_event_end = \"]/td[5]\"\nattachments_end = \"]/td[7]\"\nkeywordfield_x = \"/html/body/center/div[2]/form/table/tbody/tr[9]/td[2]/input[1]\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "description_css_end",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "description_css_end = \") > td:nth-child(6) > input:nth-child(1)\"\n#body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(3) > td:nth-child(6) > input:nth-child(1)\ndescription_x_end = \"]/td[6]/input\"\ndate_sub_x_end = \"]/td[2]\"\ndate_time_end = \"]/td[3]\"\nsdescr_end = \"]/td[4]\"\nlocation_of_event_end = \"]/td[5]\"\nattachments_end = \"]/td[7]\"\nkeywordfield_x = \"/html/body/center/div[2]/form/table/tbody/tr[9]/td[2]/input[1]\"\ndate_of_event_x = \"/html/body/center/div[2]/form/table/tbody/tr[2]/td[2]/input[5]\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "description_x_end",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "description_x_end = \"]/td[6]/input\"\ndate_sub_x_end = \"]/td[2]\"\ndate_time_end = \"]/td[3]\"\nsdescr_end = \"]/td[4]\"\nlocation_of_event_end = \"]/td[5]\"\nattachments_end = \"]/td[7]\"\nkeywordfield_x = \"/html/body/center/div[2]/form/table/tbody/tr[9]/td[2]/input[1]\"\ndate_of_event_x = \"/html/body/center/div[2]/form/table/tbody/tr[2]/td[2]/input[5]\"\nsubmit_button_x = \"/html/body/center/div[2]/form/input[2]\"\npagerows = 50 # number of rows allowed or visible on the MUFON screen",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "date_sub_x_end",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "date_sub_x_end = \"]/td[2]\"\ndate_time_end = \"]/td[3]\"\nsdescr_end = \"]/td[4]\"\nlocation_of_event_end = \"]/td[5]\"\nattachments_end = \"]/td[7]\"\nkeywordfield_x = \"/html/body/center/div[2]/form/table/tbody/tr[9]/td[2]/input[1]\"\ndate_of_event_x = \"/html/body/center/div[2]/form/table/tbody/tr[2]/td[2]/input[5]\"\nsubmit_button_x = \"/html/body/center/div[2]/form/input[2]\"\npagerows = 50 # number of rows allowed or visible on the MUFON screen\ntimestamp_string = str(datetime.now())",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "date_time_end",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "date_time_end = \"]/td[3]\"\nsdescr_end = \"]/td[4]\"\nlocation_of_event_end = \"]/td[5]\"\nattachments_end = \"]/td[7]\"\nkeywordfield_x = \"/html/body/center/div[2]/form/table/tbody/tr[9]/td[2]/input[1]\"\ndate_of_event_x = \"/html/body/center/div[2]/form/table/tbody/tr[2]/td[2]/input[5]\"\nsubmit_button_x = \"/html/body/center/div[2]/form/input[2]\"\npagerows = 50 # number of rows allowed or visible on the MUFON screen\ntimestamp_string = str(datetime.now())\npopup_text = \"/html/body/center/table/tbody/tr[2]/td\" # this holds the popup window's description text (long)",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "sdescr_end",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "sdescr_end = \"]/td[4]\"\nlocation_of_event_end = \"]/td[5]\"\nattachments_end = \"]/td[7]\"\nkeywordfield_x = \"/html/body/center/div[2]/form/table/tbody/tr[9]/td[2]/input[1]\"\ndate_of_event_x = \"/html/body/center/div[2]/form/table/tbody/tr[2]/td[2]/input[5]\"\nsubmit_button_x = \"/html/body/center/div[2]/form/input[2]\"\npagerows = 50 # number of rows allowed or visible on the MUFON screen\ntimestamp_string = str(datetime.now())\npopup_text = \"/html/body/center/table/tbody/tr[2]/td\" # this holds the popup window's description text (long)\n#popup_x_text = \"/html/body/center/table/tbody\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "location_of_event_end",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "location_of_event_end = \"]/td[5]\"\nattachments_end = \"]/td[7]\"\nkeywordfield_x = \"/html/body/center/div[2]/form/table/tbody/tr[9]/td[2]/input[1]\"\ndate_of_event_x = \"/html/body/center/div[2]/form/table/tbody/tr[2]/td[2]/input[5]\"\nsubmit_button_x = \"/html/body/center/div[2]/form/input[2]\"\npagerows = 50 # number of rows allowed or visible on the MUFON screen\ntimestamp_string = str(datetime.now())\npopup_text = \"/html/body/center/table/tbody/tr[2]/td\" # this holds the popup window's description text (long)\n#popup_x_text = \"/html/body/center/table/tbody\"\npopup_x_text = \"/html/body/center/table/tbody/tr[2]/td\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "attachments_end",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "attachments_end = \"]/td[7]\"\nkeywordfield_x = \"/html/body/center/div[2]/form/table/tbody/tr[9]/td[2]/input[1]\"\ndate_of_event_x = \"/html/body/center/div[2]/form/table/tbody/tr[2]/td[2]/input[5]\"\nsubmit_button_x = \"/html/body/center/div[2]/form/input[2]\"\npagerows = 50 # number of rows allowed or visible on the MUFON screen\ntimestamp_string = str(datetime.now())\npopup_text = \"/html/body/center/table/tbody/tr[2]/td\" # this holds the popup window's description text (long)\n#popup_x_text = \"/html/body/center/table/tbody\"\npopup_x_text = \"/html/body/center/table/tbody/tr[2]/td\"\npopup_text_x_button = \"/html/body/center/form/table/tbody/tr[3]/td[6]/input\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "keywordfield_x",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "keywordfield_x = \"/html/body/center/div[2]/form/table/tbody/tr[9]/td[2]/input[1]\"\ndate_of_event_x = \"/html/body/center/div[2]/form/table/tbody/tr[2]/td[2]/input[5]\"\nsubmit_button_x = \"/html/body/center/div[2]/form/input[2]\"\npagerows = 50 # number of rows allowed or visible on the MUFON screen\ntimestamp_string = str(datetime.now())\npopup_text = \"/html/body/center/table/tbody/tr[2]/td\" # this holds the popup window's description text (long)\n#popup_x_text = \"/html/body/center/table/tbody\"\npopup_x_text = \"/html/body/center/table/tbody/tr[2]/td\"\npopup_text_x_button = \"/html/body/center/form/table/tbody/tr[3]/td[6]/input\"\ncasesfound_css = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(1) > td:nth-child(1) > font:nth-child(1)\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "date_of_event_x",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "date_of_event_x = \"/html/body/center/div[2]/form/table/tbody/tr[2]/td[2]/input[5]\"\nsubmit_button_x = \"/html/body/center/div[2]/form/input[2]\"\npagerows = 50 # number of rows allowed or visible on the MUFON screen\ntimestamp_string = str(datetime.now())\npopup_text = \"/html/body/center/table/tbody/tr[2]/td\" # this holds the popup window's description text (long)\n#popup_x_text = \"/html/body/center/table/tbody\"\npopup_x_text = \"/html/body/center/table/tbody/tr[2]/td\"\npopup_text_x_button = \"/html/body/center/form/table/tbody/tr[3]/td[6]/input\"\ncasesfound_css = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(1) > td:nth-child(1) > font:nth-child(1)\"\n#xfiles section",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "submit_button_x",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "submit_button_x = \"/html/body/center/div[2]/form/input[2]\"\npagerows = 50 # number of rows allowed or visible on the MUFON screen\ntimestamp_string = str(datetime.now())\npopup_text = \"/html/body/center/table/tbody/tr[2]/td\" # this holds the popup window's description text (long)\n#popup_x_text = \"/html/body/center/table/tbody\"\npopup_x_text = \"/html/body/center/table/tbody/tr[2]/td\"\npopup_text_x_button = \"/html/body/center/form/table/tbody/tr[3]/td[6]/input\"\ncasesfound_css = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(1) > td:nth-child(1) > font:nth-child(1)\"\n#xfiles section\nxfiles_original_airdate_x_front = \"/html/body/font[3]/table[1]/tbody/tr[\" #starts at 2",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "pagerows",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "pagerows = 50 # number of rows allowed or visible on the MUFON screen\ntimestamp_string = str(datetime.now())\npopup_text = \"/html/body/center/table/tbody/tr[2]/td\" # this holds the popup window's description text (long)\n#popup_x_text = \"/html/body/center/table/tbody\"\npopup_x_text = \"/html/body/center/table/tbody/tr[2]/td\"\npopup_text_x_button = \"/html/body/center/form/table/tbody/tr[3]/td[6]/input\"\ncasesfound_css = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(1) > td:nth-child(1) > font:nth-child(1)\"\n#xfiles section\nxfiles_original_airdate_x_front = \"/html/body/font[3]/table[1]/tbody/tr[\" #starts at 2\nxfiles_original_airdate_x_end = \"]/td[3]\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "timestamp_string",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "timestamp_string = str(datetime.now())\npopup_text = \"/html/body/center/table/tbody/tr[2]/td\" # this holds the popup window's description text (long)\n#popup_x_text = \"/html/body/center/table/tbody\"\npopup_x_text = \"/html/body/center/table/tbody/tr[2]/td\"\npopup_text_x_button = \"/html/body/center/form/table/tbody/tr[3]/td[6]/input\"\ncasesfound_css = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(1) > td:nth-child(1) > font:nth-child(1)\"\n#xfiles section\nxfiles_original_airdate_x_front = \"/html/body/font[3]/table[1]/tbody/tr[\" #starts at 2\nxfiles_original_airdate_x_end = \"]/td[3]\"\n#ancient aliens section",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "popup_text",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "popup_text = \"/html/body/center/table/tbody/tr[2]/td\" # this holds the popup window's description text (long)\n#popup_x_text = \"/html/body/center/table/tbody\"\npopup_x_text = \"/html/body/center/table/tbody/tr[2]/td\"\npopup_text_x_button = \"/html/body/center/form/table/tbody/tr[3]/td[6]/input\"\ncasesfound_css = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(1) > td:nth-child(1) > font:nth-child(1)\"\n#xfiles section\nxfiles_original_airdate_x_front = \"/html/body/font[3]/table[1]/tbody/tr[\" #starts at 2\nxfiles_original_airdate_x_end = \"]/td[3]\"\n#ancient aliens section\nancient_aliens_original_airdate_x_front = \"\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "#popup_x_text",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "#popup_x_text = \"/html/body/center/table/tbody\"\npopup_x_text = \"/html/body/center/table/tbody/tr[2]/td\"\npopup_text_x_button = \"/html/body/center/form/table/tbody/tr[3]/td[6]/input\"\ncasesfound_css = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(1) > td:nth-child(1) > font:nth-child(1)\"\n#xfiles section\nxfiles_original_airdate_x_front = \"/html/body/font[3]/table[1]/tbody/tr[\" #starts at 2\nxfiles_original_airdate_x_end = \"]/td[3]\"\n#ancient aliens section\nancient_aliens_original_airdate_x_front = \"\"\nancient_aliens_original_airdate_x_front = \"\"",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "popup_x_text",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "popup_x_text = \"/html/body/center/table/tbody/tr[2]/td\"\npopup_text_x_button = \"/html/body/center/form/table/tbody/tr[3]/td[6]/input\"\ncasesfound_css = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(1) > td:nth-child(1) > font:nth-child(1)\"\n#xfiles section\nxfiles_original_airdate_x_front = \"/html/body/font[3]/table[1]/tbody/tr[\" #starts at 2\nxfiles_original_airdate_x_end = \"]/td[3]\"\n#ancient aliens section\nancient_aliens_original_airdate_x_front = \"\"\nancient_aliens_original_airdate_x_front = \"\"\n#for use with selenium automated data extraction",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "popup_text_x_button",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "popup_text_x_button = \"/html/body/center/form/table/tbody/tr[3]/td[6]/input\"\ncasesfound_css = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(1) > td:nth-child(1) > font:nth-child(1)\"\n#xfiles section\nxfiles_original_airdate_x_front = \"/html/body/font[3]/table[1]/tbody/tr[\" #starts at 2\nxfiles_original_airdate_x_end = \"]/td[3]\"\n#ancient aliens section\nancient_aliens_original_airdate_x_front = \"\"\nancient_aliens_original_airdate_x_front = \"\"\n#for use with selenium automated data extraction\ntopics = ['low in the sky','line formation','bright','green','blue','fbi was there','swat','I saw police','Angels','lights in a line','strange light','cave'] # todo iterate the entire code through this topics array.",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "casesfound_css",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "casesfound_css = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(1) > td:nth-child(1) > font:nth-child(1)\"\n#xfiles section\nxfiles_original_airdate_x_front = \"/html/body/font[3]/table[1]/tbody/tr[\" #starts at 2\nxfiles_original_airdate_x_end = \"]/td[3]\"\n#ancient aliens section\nancient_aliens_original_airdate_x_front = \"\"\nancient_aliens_original_airdate_x_front = \"\"\n#for use with selenium automated data extraction\ntopics = ['low in the sky','line formation','bright','green','blue','fbi was there','swat','I saw police','Angels','lights in a line','strange light','cave'] # todo iterate the entire code through this topics array.\nbuzzwords = ['God','Jesus','Heaven'] # these will be eliminated from results as they are automatically biased and unlikely to be credible.",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "xfiles_original_airdate_x_front",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "xfiles_original_airdate_x_front = \"/html/body/font[3]/table[1]/tbody/tr[\" #starts at 2\nxfiles_original_airdate_x_end = \"]/td[3]\"\n#ancient aliens section\nancient_aliens_original_airdate_x_front = \"\"\nancient_aliens_original_airdate_x_front = \"\"\n#for use with selenium automated data extraction\ntopics = ['low in the sky','line formation','bright','green','blue','fbi was there','swat','I saw police','Angels','lights in a line','strange light','cave'] # todo iterate the entire code through this topics array.\nbuzzwords = ['God','Jesus','Heaven'] # these will be eliminated from results as they are automatically biased and unlikely to be credible.\nodd_words = ['spouse']\nMain_Cities = ['','Austin','Miami','Reno','Tinley Park','New York','Houston','El Paso']",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "xfiles_original_airdate_x_end",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "xfiles_original_airdate_x_end = \"]/td[3]\"\n#ancient aliens section\nancient_aliens_original_airdate_x_front = \"\"\nancient_aliens_original_airdate_x_front = \"\"\n#for use with selenium automated data extraction\ntopics = ['low in the sky','line formation','bright','green','blue','fbi was there','swat','I saw police','Angels','lights in a line','strange light','cave'] # todo iterate the entire code through this topics array.\nbuzzwords = ['God','Jesus','Heaven'] # these will be eliminated from results as they are automatically biased and unlikely to be credible.\nodd_words = ['spouse']\nMain_Cities = ['','Austin','Miami','Reno','Tinley Park','New York','Houston','El Paso']\nMain_HotSpots = {'Tinley Park':['10/2004','10/2005']}",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "ancient_aliens_original_airdate_x_front",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "ancient_aliens_original_airdate_x_front = \"\"\nancient_aliens_original_airdate_x_front = \"\"\n#for use with selenium automated data extraction\ntopics = ['low in the sky','line formation','bright','green','blue','fbi was there','swat','I saw police','Angels','lights in a line','strange light','cave'] # todo iterate the entire code through this topics array.\nbuzzwords = ['God','Jesus','Heaven'] # these will be eliminated from results as they are automatically biased and unlikely to be credible.\nodd_words = ['spouse']\nMain_Cities = ['','Austin','Miami','Reno','Tinley Park','New York','Houston','El Paso']\nMain_HotSpots = {'Tinley Park':['10/2004','10/2005']}\nPrimary_States = ['Utah','Idaho','Montana','West Virginia','New Hampshire','Maine']\nCities_to_avoid = ['Chicago']",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "ancient_aliens_original_airdate_x_front",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "ancient_aliens_original_airdate_x_front = \"\"\n#for use with selenium automated data extraction\ntopics = ['low in the sky','line formation','bright','green','blue','fbi was there','swat','I saw police','Angels','lights in a line','strange light','cave'] # todo iterate the entire code through this topics array.\nbuzzwords = ['God','Jesus','Heaven'] # these will be eliminated from results as they are automatically biased and unlikely to be credible.\nodd_words = ['spouse']\nMain_Cities = ['','Austin','Miami','Reno','Tinley Park','New York','Houston','El Paso']\nMain_HotSpots = {'Tinley Park':['10/2004','10/2005']}\nPrimary_States = ['Utah','Idaho','Montana','West Virginia','New Hampshire','Maine']\nCities_to_avoid = ['Chicago']\n#todo add tags for data runs that can indicate tests for things like starlink satelites.",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "topics",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "topics = ['low in the sky','line formation','bright','green','blue','fbi was there','swat','I saw police','Angels','lights in a line','strange light','cave'] # todo iterate the entire code through this topics array.\nbuzzwords = ['God','Jesus','Heaven'] # these will be eliminated from results as they are automatically biased and unlikely to be credible.\nodd_words = ['spouse']\nMain_Cities = ['','Austin','Miami','Reno','Tinley Park','New York','Houston','El Paso']\nMain_HotSpots = {'Tinley Park':['10/2004','10/2005']}\nPrimary_States = ['Utah','Idaho','Montana','West Virginia','New Hampshire','Maine']\nCities_to_avoid = ['Chicago']\n#todo add tags for data runs that can indicate tests for things like starlink satelites.\nanother_search_x = \"/html/body/center/form/input[1]\"\n#functions section",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "buzzwords",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "buzzwords = ['God','Jesus','Heaven'] # these will be eliminated from results as they are automatically biased and unlikely to be credible.\nodd_words = ['spouse']\nMain_Cities = ['','Austin','Miami','Reno','Tinley Park','New York','Houston','El Paso']\nMain_HotSpots = {'Tinley Park':['10/2004','10/2005']}\nPrimary_States = ['Utah','Idaho','Montana','West Virginia','New Hampshire','Maine']\nCities_to_avoid = ['Chicago']\n#todo add tags for data runs that can indicate tests for things like starlink satelites.\nanother_search_x = \"/html/body/center/form/input[1]\"\n#functions section\ndef scrollment():",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "odd_words",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "odd_words = ['spouse']\nMain_Cities = ['','Austin','Miami','Reno','Tinley Park','New York','Houston','El Paso']\nMain_HotSpots = {'Tinley Park':['10/2004','10/2005']}\nPrimary_States = ['Utah','Idaho','Montana','West Virginia','New Hampshire','Maine']\nCities_to_avoid = ['Chicago']\n#todo add tags for data runs that can indicate tests for things like starlink satelites.\nanother_search_x = \"/html/body/center/form/input[1]\"\n#functions section\ndef scrollment():\n    ic()",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "Main_Cities",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "Main_Cities = ['','Austin','Miami','Reno','Tinley Park','New York','Houston','El Paso']\nMain_HotSpots = {'Tinley Park':['10/2004','10/2005']}\nPrimary_States = ['Utah','Idaho','Montana','West Virginia','New Hampshire','Maine']\nCities_to_avoid = ['Chicago']\n#todo add tags for data runs that can indicate tests for things like starlink satelites.\nanother_search_x = \"/html/body/center/form/input[1]\"\n#functions section\ndef scrollment():\n    ic()\n    '''",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "Main_HotSpots",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "Main_HotSpots = {'Tinley Park':['10/2004','10/2005']}\nPrimary_States = ['Utah','Idaho','Montana','West Virginia','New Hampshire','Maine']\nCities_to_avoid = ['Chicago']\n#todo add tags for data runs that can indicate tests for things like starlink satelites.\nanother_search_x = \"/html/body/center/form/input[1]\"\n#functions section\ndef scrollment():\n    ic()\n    '''\n    readme",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "Primary_States",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "Primary_States = ['Utah','Idaho','Montana','West Virginia','New Hampshire','Maine']\nCities_to_avoid = ['Chicago']\n#todo add tags for data runs that can indicate tests for things like starlink satelites.\nanother_search_x = \"/html/body/center/form/input[1]\"\n#functions section\ndef scrollment():\n    ic()\n    '''\n    readme\n    scrolls down one page length to see invisible content.",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "Cities_to_avoid",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "Cities_to_avoid = ['Chicago']\n#todo add tags for data runs that can indicate tests for things like starlink satelites.\nanother_search_x = \"/html/body/center/form/input[1]\"\n#functions section\ndef scrollment():\n    ic()\n    '''\n    readme\n    scrolls down one page length to see invisible content.\n    '''",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "another_search_x",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "another_search_x = \"/html/body/center/form/input[1]\"\n#functions section\ndef scrollment():\n    ic()\n    '''\n    readme\n    scrolls down one page length to see invisible content.\n    '''\n    driver.execute_script(\"window.scrollTo(0,document.body.scrollHeight-1)\")\ndef shifty(bottom,top):",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "#*topics",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "#*topics = 'lights'\ncity = 'Orlando'\n#*selenium_crawler(topics,city,Primary_States,Main_HotSpots,Cities_to_avoid)\n#selenium_crawler(topics,Main_Cities,Primary_States,Main_HotSpots,Cities_to_avoid)\n#corpora_sherlock(\"Scrubbed_MUFON_Database_Scraped_Reports.txt\",'ø')\n'''\nCape Canaveral Space Force Station\nWASHINGTON — SpaceX successfully launched another set of Starlink satellites Feb. 4 in the first of back-to-back Falcon 9 launches scheduled from Cape Canaveral. The Falcon 9 rocket lifted off at 1:19 a.m. Eastern from Space Launch Complex 40 at Cape Canaveral Space Force Station.\n'''\n#!unused function",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "city",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "city = 'Orlando'\n#*selenium_crawler(topics,city,Primary_States,Main_HotSpots,Cities_to_avoid)\n#selenium_crawler(topics,Main_Cities,Primary_States,Main_HotSpots,Cities_to_avoid)\n#corpora_sherlock(\"Scrubbed_MUFON_Database_Scraped_Reports.txt\",'ø')\n'''\nCape Canaveral Space Force Station\nWASHINGTON — SpaceX successfully launched another set of Starlink satellites Feb. 4 in the first of back-to-back Falcon 9 launches scheduled from Cape Canaveral. The Falcon 9 rocket lifted off at 1:19 a.m. Eastern from Space Launch Complex 40 at Cape Canaveral Space Force Station.\n'''\n#!unused function\ndef convert_csv_to_dict(filename):",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "#todofilename",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "#todofilename = \"MUFON_uscities.csv\"\n#todocities_df = convert_csv_to_pandas(filename)\n# saved with cityname as index column\n#todo this function is working properly and gives coordinates of cities if available.\ndef finding_nemopolis_old(city_name,state_name,cities_df,cities2_df):\n    ic()\n    #test dictionary\n    #print(\"testing Austin,TX in df: \",end=\"\")\n    # Check whether city is in the dictionary and print feedback\n    #first check main one",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "#todocities_df",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "#todocities_df = convert_csv_to_pandas(filename)\n# saved with cityname as index column\n#todo this function is working properly and gives coordinates of cities if available.\ndef finding_nemopolis_old(city_name,state_name,cities_df,cities2_df):\n    ic()\n    #test dictionary\n    #print(\"testing Austin,TX in df: \",end=\"\")\n    # Check whether city is in the dictionary and print feedback\n    #first check main one\n    from operator import indexOf",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "#*coordinates",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "#*coordinates = city_csv_to_location(\"citiestocheck.csv\")\n#*save_dict_as_csvfile(coordinates)\n#writetofile(coordinates,\"MUFON_dictionary_cities_locations.csv\")\n#ic()\n#todo function to get closest \"n\" reports to a report (report_i) based on the location of report_i\ndef Jones_Effect(point_x,dataset):\n    '''\n    README\n    Q is len(dataset)/(2) round down so for len(dataset) = 1203 the Q =  1203/2 = 601.5 round down to 601\n    find the Q closest points by longitude",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "result = geopy_city_to_coordinates(\"Austin\",\"Texas\")\nvar = finding_nemopolis(\"Austin\",\"Texas\")\nic(var)\nic(result)\n#city_text = city_extraction(\"blinding,2021-03-13,2010-08-14 9:15PM,it was a bright blue light flying over head,Bogalusa LA US,,Long Description of Sighting Report Driving home at dark we’re on a new road that boarded Ft Knox KY. Three huge brights started descending towards us. I thought it was an airplane though all we could see were these blinding lights. I said that I thought it was going to land on us. Then it was stationary over the road. Two more light turned on on either side of the three. Then as in one second they simultaneously darted down to the side I’d the road and all lights and evidence of it was gone. In the daytime I looked at spot where they went down and it was a depression of weeds and tree saplings. It bordered on Ft Know property line. It wasn’t until years later I realized there was no sound. In fact I felt numb after seeing it. Content-type: text/html\")\n#ic(city_text)\n'''loc_data = finding_nemopolis('Austin','Texas')\nloc_data2 = finding_nemopolis('San Diego','California')\n#ic(loc_data)\n#ic(loc_data2)",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "var",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "var = finding_nemopolis(\"Austin\",\"Texas\")\nic(var)\nic(result)\n#city_text = city_extraction(\"blinding,2021-03-13,2010-08-14 9:15PM,it was a bright blue light flying over head,Bogalusa LA US,,Long Description of Sighting Report Driving home at dark we’re on a new road that boarded Ft Knox KY. Three huge brights started descending towards us. I thought it was an airplane though all we could see were these blinding lights. I said that I thought it was going to land on us. Then it was stationary over the road. Two more light turned on on either side of the three. Then as in one second they simultaneously darted down to the side I’d the road and all lights and evidence of it was gone. In the daytime I looked at spot where they went down and it was a depression of weeds and tree saplings. It bordered on Ft Know property line. It wasn’t until years later I realized there was no sound. In fact I felt numb after seeing it. Content-type: text/html\")\n#ic(city_text)\n'''loc_data = finding_nemopolis('Austin','Texas')\nloc_data2 = finding_nemopolis('San Diego','California')\n#ic(loc_data)\n#ic(loc_data2)\ndistance = chasm_between(loc_data,loc_data2)",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "#city_text",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "#city_text = city_extraction(\"blinding,2021-03-13,2010-08-14 9:15PM,it was a bright blue light flying over head,Bogalusa LA US,,Long Description of Sighting Report Driving home at dark we’re on a new road that boarded Ft Knox KY. Three huge brights started descending towards us. I thought it was an airplane though all we could see were these blinding lights. I said that I thought it was going to land on us. Then it was stationary over the road. Two more light turned on on either side of the three. Then as in one second they simultaneously darted down to the side I’d the road and all lights and evidence of it was gone. In the daytime I looked at spot where they went down and it was a depression of weeds and tree saplings. It bordered on Ft Know property line. It wasn’t until years later I realized there was no sound. In fact I felt numb after seeing it. Content-type: text/html\")\n#ic(city_text)\n'''loc_data = finding_nemopolis('Austin','Texas')\nloc_data2 = finding_nemopolis('San Diego','California')\n#ic(loc_data)\n#ic(loc_data2)\ndistance = chasm_between(loc_data,loc_data2)\n#ic(distance)\n#ic(loc_data)\n#ic()'''",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "'''loc_data",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "'''loc_data = finding_nemopolis('Austin','Texas')\nloc_data2 = finding_nemopolis('San Diego','California')\n#ic(loc_data)\n#ic(loc_data2)\ndistance = chasm_between(loc_data,loc_data2)\n#ic(distance)\n#ic(loc_data)\n#ic()'''\n#?city_cleaner(\"MUFON_Database_Scraped_Reports.csv\")\n#todo find coordinates for the cities",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "loc_data2",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "loc_data2 = finding_nemopolis('San Diego','California')\n#ic(loc_data)\n#ic(loc_data2)\ndistance = chasm_between(loc_data,loc_data2)\n#ic(distance)\n#ic(loc_data)\n#ic()'''\n#?city_cleaner(\"MUFON_Database_Scraped_Reports.csv\")\n#todo find coordinates for the cities\n'''coordinates_file = open(\"citiescoordinates.txt\",\"w+\")",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "distance",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "distance = chasm_between(loc_data,loc_data2)\n#ic(distance)\n#ic(loc_data)\n#ic()'''\n#?city_cleaner(\"MUFON_Database_Scraped_Reports.csv\")\n#todo find coordinates for the cities\n'''coordinates_file = open(\"citiescoordinates.txt\",\"w+\")\ncoordinates_file.write(\"city,state_id\\n\")\ncoordinates_file.close()\ncities = open(\"citiestocheck.csv\",'r')",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "'''coordinates_file",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "'''coordinates_file = open(\"citiescoordinates.txt\",\"w+\")\ncoordinates_file.write(\"city,state_id\\n\")\ncoordinates_file.close()\ncities = open(\"citiestocheck.csv\",'r')\ncommas = 0\nnewcity = \"\"\nnewstate = \"\"\nfor city in tqdm(cities):\n    if city != \"\\ufeffcity, state_id\\n\":\n        coordinates_file = open(\"citiescoordinates.txt\",\"a+\")",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "cities",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "cities = open(\"citiestocheck.csv\",'r')\ncommas = 0\nnewcity = \"\"\nnewstate = \"\"\nfor city in tqdm(cities):\n    if city != \"\\ufeffcity, state_id\\n\":\n        coordinates_file = open(\"citiescoordinates.txt\",\"a+\")\n        coordinates = \"\" # init and reset\n        for i in city:\n            if i == ',':",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "commas",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "commas = 0\nnewcity = \"\"\nnewstate = \"\"\nfor city in tqdm(cities):\n    if city != \"\\ufeffcity, state_id\\n\":\n        coordinates_file = open(\"citiescoordinates.txt\",\"a+\")\n        coordinates = \"\" # init and reset\n        for i in city:\n            if i == ',':\n                commas += 1",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "newcity",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "newcity = \"\"\nnewstate = \"\"\nfor city in tqdm(cities):\n    if city != \"\\ufeffcity, state_id\\n\":\n        coordinates_file = open(\"citiescoordinates.txt\",\"a+\")\n        coordinates = \"\" # init and reset\n        for i in city:\n            if i == ',':\n                commas += 1\n            else:",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "newstate",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "newstate = \"\"\nfor city in tqdm(cities):\n    if city != \"\\ufeffcity, state_id\\n\":\n        coordinates_file = open(\"citiescoordinates.txt\",\"a+\")\n        coordinates = \"\" # init and reset\n        for i in city:\n            if i == ',':\n                commas += 1\n            else:\n                if commas == 0:",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": "project.legacy_files.original_code",
        "description": "project.legacy_files.original_code",
        "peekOfCode": "results = point_finder(30.2711286,-97.7436995)\nic(results)",
        "detail": "project.legacy_files.original_code",
        "documentation": {}
    },
    {
        "label": "scrollment",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def scrollment():\n    ic()\n    readme\n    scrolls down one page length to see invisible content.\n    driver.execute_script(\"window.scrollTo(0,document.body.scrollHeight-1)\")\ndef shifty(bottom,top):\n    ic()\n    temp = 0\n    if bottom > top:\n        temp = top",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "shifty",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def shifty(bottom,top):\n    ic()\n    temp = 0\n    if bottom > top:\n        temp = top\n        top = bottom\n        bottom = temp\n    x = random.uniform(top,top+4)\n    while x < top and x > bottom:\n        x = random.random()*float(random.uniform(0,top))",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "xpathcreator",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def xpathcreator(frontend,iterator,backend):\n    ic()\n    xpaths_array = []\n    fullxpath = \"\"\n    for i in range(int(iter_start),int(iter_end)):\n        fullxpath = frontend + str(i) + backend\n        xpaths_array.append(fullxpath)\n        fullxpath = frontend + str(i) + backend\n    if fullxpath == \"\":\n        fullxpath = frontend + str(iterator) + backend",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "xfiles_spyder",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def xfiles_spyder():\n    ic()\n    firefox_driver = \"/Users/GrahamAtWork/Documents/firefoxdriver\"\n    driver = webdriver.Firefox()\n    url = \"http://www.insidethex.co.uk/\"\n    print(\"Beginning the program sequence: \",end=\"\")\n    driver.get(url)\n    print(url)\n    from MUFONVARIABLES import original_airdate_x_front\n    from MUFONVARIABLES import original_airdate_x_end",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "ancient_aliens_spyder",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def ancient_aliens_spyder():\n    ic()\n    firefox_driver = \"/Users/GrahamAtWork/Documents/firefoxdriver\"\n    driver = webdriver.Firefox()\n    url = \"https://subslikescript.com/series/Ancient_Aliens-1643266\"\n    print(\"Beginning the program sequence: \",end=\"\")\n    driver.get(url)\n    elems = driver.find_elements_by_tag_name('a')\n    tagnumber = 2\n    for elem in tqdm(range(0,len(elems))):",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "cosine_sim_vectors",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def cosine_sim_vectors(vec1,vec2):\n    ic()\n    vec1 = vec1.reshape(1,-1)\n    vec2 = vec2.reshape(1,-1)\n    return cosine_similarity(vec1,vec2)[0][0]\ndef clean_string(text):\n    try:\n        text = ''.join([word for word in text if word not in string.digits])\n    except TypeError:\n        text = \"N/A\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "clean_string",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def clean_string(text):\n    try:\n        text = ''.join([word for word in text if word not in string.digits])\n    except TypeError:\n        text = \"N/A\"\n    if text != \"N/A\":\n        text = ''.join([word for word in text if word not in string.punctuation])\n        text = text.lower()\n        text = ' '.join([word for word in text.split() if word not in stopwords])\n    else:",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "Levenshtein_Similarity",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def Levenshtein_Similarity(phrases):\n    ic()\n    from nltk.corpus import stopwords\n    stopwords = stopwords.words('english')\n    sentences = phrases\n    cleaned = list(map(clean_string, sentences))\n    vectorizer = CountVectorizer().fit_transform(cleaned)\n    vectors = vectorizer.toarray()\n    csim = cosine_similarity(vectors)\n    csimilarity = cosine_sim_vectors(vectors[0],vectors[1])",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "my_next_step",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def my_next_step(driver):\n    ic()\n    driver.refresh()\n    time.sleep(10)\n    element=driver.switch_to_frame('iframe')\ndef wordstemmer(description_string):\n    ic()\n    words = description_string.split(\" \")\n    print(words)\n    ps = PorterStemmer()",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "wordstemmer",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def wordstemmer(description_string):\n    ic()\n    words = description_string.split(\" \")\n    print(words)\n    ps = PorterStemmer()\n    for word in words:\n        print(ps.stem(word))\ndef transcript_parser(transcript_file,heading_text):\n    ic()\n    heading_text = str(heading_text)",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "transcript_parser",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def transcript_parser(transcript_file,heading_text):\n    ic()\n    heading_text = str(heading_text)\n    newfilename = \"\"\n    myfile = open(transcript_file,'r')\n    newfilename = \"MUFON_scrubbed_\" + transcript_file\n    outfile = open(newfilename,'w')\n    new_item_line = \"\"\n    for item in tqdm(myfile):\n        endofline = 0",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "initializer",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def initializer(download_choice,scrape_more):\n    ic()\n    if download_choice == True:\n        xfiles_spyder()\n        ancient_aliens_spyder()\n        transcript_parser(\"MUFON_Ancient_Aliens_Episodes_Scraped.txt\",\"ANCIENT ALIENS\")\n    else:\n        print(\"transcripts have been downloaded\\nChecking updated MUFON Reports Database for Quality\")\n        transcript_parser(\"MUFON_Database_Scraped_Reports.txt\",'Long Description of Sighting Report')\n    if scrape_more == \"NO\" or scrape_more == False or scrape_more == \"n\" or scrape_more == \"N\":",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "selenium_crawler",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def selenium_crawler(topic,city,states,mainhotspots,citiestoavoid):\n    PRESET_VARIABLE_MAX = 30\n    mufon_file = open(\"MUFON_Database_Scraped_Reports.txt\",'a+')\n    mufon_file.write(timestamp_string)\n    mufon_file.close()\n    topic\n    from MUFONVARIABLES import nearest_city_field_x\n    from MUFONVARIABLES import event_stateusa_x\n    from MUFONVARIABLES import keywordfield_x\n    from MUFONVARIABLES import date_of_event_x",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "corpora_sherlock",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def corpora_sherlock(text_file,delimeter_used):\n        README\n            takes in a text file and creates a csv file\n            (textfile,delimeter_used) for this case will be 'ø' this is option + o\n    ic()\n    newfilename = \"\"\n    myfile = open(text_file,'r')\n    newfilename = \"MUFON_Sherlocked_\" + text_file\n    outfile = open(newfilename,'w')\n    myfile = myfile.read()",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "convert_csv_to_dict",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def convert_csv_to_dict(filename):\n    ic()\n    import csv\n    csv_reader = csv.DictReader(csv_file)\n    line_count = 0\n    for row in csv_reader:\n        if line_count == 0:\n            print(f'Column names are {\", \".join(row)}')\n            line_count += 1\n        line_count += 1",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "convert_csv_to_pandas",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def convert_csv_to_pandas(filename,indexcolumn):\n    ic()\n    df = pd.read_csv(filename, index_col=indexcolumn)\n    return df\ndef write_to_csv_from_pandas(df_name,new_file_name):\n    ic()\n    import pandas\n    df = pandas.read_csv('hrdata.csv',\n                index_col='Employee',\n                parse_dates=['Hired'],",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "write_to_csv_from_pandas",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def write_to_csv_from_pandas(df_name,new_file_name):\n    ic()\n    import pandas\n    df = pandas.read_csv('hrdata.csv',\n                index_col='Employee',\n                parse_dates=['Hired'],\n                header=0,\n                names=['Employee', 'Hired', 'Salary', 'Sick Days'])\n    newfilename += \".csv\"\n    df.to_csv(newfilename)",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "finding_nemopolis_old",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def finding_nemopolis_old(city_name,state_name,cities_df,cities2_df):\n    ic()\n    from operator import indexOf\n    Mode2 = False\n    if len(state_name) == 2:\n        Mode2 = True\n    null_array = ['','','','']\n    if city_name not in cities_df['city_ascii']:\n        if city_name not in cities2_df['city_ascii']:\n            try:",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "chasm_between",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def chasm_between(point1,point2):\n    ic()\n    import geopy.distance\n    from geopy import distance\n    coords_1 = (point1[2], point1[3])\n    coords_2 = (point2[2], point2[3])\n    dist = geopy.distance.distance(coords_1, coords_2).mi\n    return dist\ndef tojulian(day,month,year):\n    README",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "tojulian",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def tojulian(day,month,year):\n    README\n        dd/mm/yyyy\n    ic()\n    import datetime\n    import jdcal\n    fmt = '%m.%d.%Y'\n    s = str(month) + \".\" + str(day) + \".\" + str(year)\n    dt = datetime.datetime.strptime(s, fmt)\n    julian_day = sum(jdcal.gcal2jd(dt.year, dt.month, dt.day))",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "city_finder",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def city_finder(city_name,state_name):\n    geolocator = Nominatim(user_agent=\"mufon_scanner\")\n    location = geolocator.geocode(\"175 5th Avenue NYC\")\n    print(location.address)\n    print((location.latitude, location.longitude))\n    print(location.raw)\n    newport_ri = (41.49008, -71.312796)\n    cleveland_oh = (41.499498, -81.695391)\n    print(geodes\n    df = pd.DataFrame({'name': ['paris', 'berlin', 'london']})",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "city_extraction",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def city_extraction(string):\n    ic()\n    string_spaces = 0\n    s_iters = []\n    string_commas = 0\n    c_iters = []\n    iterator = 0\n    for i in string:\n        if i == ' ':\n            string_spaces +=1",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "writetofile",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def writetofile(text,filename):\n    ic()\n    outfile = open(filename,'w+')\n    outfile.write(text)\n    outfile.close()\ndef city_cleaner(filename):\n    ic()\n    csv_data = pd.read_csv(filename)\n    new_locations = []\n    for location in csv_data['Location of Event']:",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "city_cleaner",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def city_cleaner(filename):\n    ic()\n    csv_data = pd.read_csv(filename)\n    new_locations = []\n    for location in csv_data['Location of Event']:\n        new_location = city_extraction(location)\n        new_locations.append(new_location)\n    df = pd.read_csv(filename)\n    df[\"Optimized Location\"] = new_locations\n    df.to_csv(filename, index=False)",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "plotly_project",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def plotly_project():\n    ic()\n    import re\n    import string\n    import time\n    import os.path\n    import numpy as nmp\n    import numpy as np\n    import pandas as pd\n    import matplotlib",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "city_csv_to_location",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def city_csv_to_location(filename):\n    ic()\n    coordinates_dict = {'Bogalusa/LA':['Bogalusa', 'LA', 30.7812, -89.8633]}\n    cities_df = convert_csv_to_pandas(\"MUFON_uscities.csv\",\"city\")\n    cities2_df = convert_csv_to_pandas(\"MUFON_2014_Cities_updated.csv\",\"city\")\n    cities_df.head()\n    csv_data = pd.read_csv(filename)\n    new_locations = []\n    csv_data_states = []\n    coordinates = []",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "save_dict_as_csvfile",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def save_dict_as_csvfile(dict_name):\n    ic()\n    filename = 'MUFON_' + str(\"dictionary\") + '.csv'\n    with open(filename, 'w+') as f:\n        for key in dict_name.keys():\n            f.write(\"%s,%s\\n\"%(key,dict_name[key]))\ndef Jones_Effect(point_x,dataset):\n    README\n    Q is len(dataset)/(2) round down so for len(dataset) = 1203 the Q =  1203/2 = 601.5 round down to 601\n    find the Q closest points by longitude",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "Jones_Effect",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def Jones_Effect(point_x,dataset):\n    README\n    Q is len(dataset)/(2) round down so for len(dataset) = 1203 the Q =  1203/2 = 601.5 round down to 601\n    find the Q closest points by longitude\n    find the Q closest points by latitude\n    find which points occur in both sets\n    get their distances\n    point_x = the dataframe below\n    Date/Time of Event  date posted city    state   country latitude    longitude   Description shape   duration (seconds)\n    10/10/49 20:30      4/27/04   san marcostx        us    29.8830556  -97.9411111         cylinder     2700",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "geopy_city_to_coordinates",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def geopy_city_to_coordinates(cityname,statename):\n    README\n    city name must be like \"Austin\"\n    statename must be in form \"Texas\"\n    no spaces they will be combined with space between them\n    inputstring = cityname + \" \" + statename\n    from geopy.geocoders import Nominatim\n    geolocator = Nominatim(user_agent='myapplication')\n    location = geolocator.geocode(inputstring)\n    print(location.address)",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "finding_nemopolis",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def finding_nemopolis(city_name,state_name):\n    location_data = ['']\n    if len(state_name)>2:\n        location_data = geopy_city_to_coordinates(city_name,state_name)\n    else:\n        return location_data\n    return location_data\nresult = geopy_city_to_coordinates(\"Austin\",\"Texas\")\nvar = finding_nemopolis(\"Austin\",\"Texas\")\nic(var)",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "point_finder",
        "kind": 2,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "def point_finder(R_x,R_y):\n    README\n    R_x =\n    R_y =\n    M_x =\n    M_y =\n    file headers are below\n    Source,Date/Time of Event,date posted,duration (seconds),city,state (ABBR),STATE(FULL),country,latitude,longitude ,comments,shape, ,,,\n    import pandas as pd\n    csvfilename = \"NUFORC_CONSOLIDATED_DB.csv\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "maincontrols_tab_dateyear_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "maincontrols_tab_dateyear_id = \"date_year\"\nmaincontrols_tab_datemonth_id = \"date_month\"\nmaincontrols_tab_dateday_id = \"date_day\"\nmaincontrols_tab_time_hour_id = \"time_hour\"\nmaincontrols_tab_time_minute_id  = \"time_minute\"\nmaincontrols_tab_time_second_id = \"time_second\"\nmaincontrols_tab_fieldofview_id = \"view_fov\"\nlocation_tab_id = \"ui-id-21\"\nlocation_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "maincontrols_tab_datemonth_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "maincontrols_tab_datemonth_id = \"date_month\"\nmaincontrols_tab_dateday_id = \"date_day\"\nmaincontrols_tab_time_hour_id = \"time_hour\"\nmaincontrols_tab_time_minute_id  = \"time_minute\"\nmaincontrols_tab_time_second_id = \"time_second\"\nmaincontrols_tab_fieldofview_id = \"view_fov\"\nlocation_tab_id = \"ui-id-21\"\nlocation_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "maincontrols_tab_dateday_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "maincontrols_tab_dateday_id = \"date_day\"\nmaincontrols_tab_time_hour_id = \"time_hour\"\nmaincontrols_tab_time_minute_id  = \"time_minute\"\nmaincontrols_tab_time_second_id = \"time_second\"\nmaincontrols_tab_fieldofview_id = \"view_fov\"\nlocation_tab_id = \"ui-id-21\"\nlocation_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "maincontrols_tab_time_hour_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "maincontrols_tab_time_hour_id = \"time_hour\"\nmaincontrols_tab_time_minute_id  = \"time_minute\"\nmaincontrols_tab_time_second_id = \"time_second\"\nmaincontrols_tab_fieldofview_id = \"view_fov\"\nlocation_tab_id = \"ui-id-21\"\nlocation_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"\ntimejump_tab_id = \"ui-id-10\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "maincontrols_tab_time_second_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "maincontrols_tab_time_second_id = \"time_second\"\nmaincontrols_tab_fieldofview_id = \"view_fov\"\nlocation_tab_id = \"ui-id-21\"\nlocation_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"\ntimejump_tab_id = \"ui-id-10\"\nlocation_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "maincontrols_tab_fieldofview_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "maincontrols_tab_fieldofview_id = \"view_fov\"\nlocation_tab_id = \"ui-id-21\"\nlocation_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"\ntimejump_tab_id = \"ui-id-10\"\nlocation_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "location_tab_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "location_tab_id = \"ui-id-21\"\nlocation_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"\ntimejump_tab_id = \"ui-id-10\"\nlocation_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "location_tab_latitude_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "location_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"\ntimejump_tab_id = \"ui-id-10\"\nlocation_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"\natmosphere_tab_id = \"ui-id-6\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "location_tab_longitude_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "location_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"\ntimejump_tab_id = \"ui-id-10\"\nlocation_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"\natmosphere_tab_id = \"ui-id-6\"\nlightpollution_class = \"stelaction\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "location_tab_altitude_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "location_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"\ntimejump_tab_id = \"ui-id-10\"\nlocation_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"\natmosphere_tab_id = \"ui-id-6\"\nlightpollution_class = \"stelaction\"\nactions_tab_class = \"checkableaction\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "location_tab_name_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "location_tab_name_id = \"loc_name\"\ntimejump_tab_id = \"ui-id-10\"\nlocation_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"\natmosphere_tab_id = \"ui-id-6\"\nlightpollution_class = \"stelaction\"\nactions_tab_class = \"checkableaction\"\nactions_tab_datetime_value = \"actionShow_DateTime_Window_Global\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "timejump_tab_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "timejump_tab_id = \"ui-id-10\"\nlocation_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"\natmosphere_tab_id = \"ui-id-6\"\nlightpollution_class = \"stelaction\"\nactions_tab_class = \"checkableaction\"\nactions_tab_datetime_value = \"actionShow_DateTime_Window_Global\"\nactions_button_id = \"bt_doaction\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "location_tab_latitude_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "location_tab_latitude_id = \"loc_latitude\"\nlocation_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"\natmosphere_tab_id = \"ui-id-6\"\nlightpollution_class = \"stelaction\"\nactions_tab_class = \"checkableaction\"\nactions_tab_datetime_value = \"actionShow_DateTime_Window_Global\"\nactions_button_id = \"bt_doaction\"\nactions_optionvalue_update = \"actionRun_AstroCalc_UpdatePositions\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "location_tab_longitude_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "location_tab_longitude_id = \"loc_longitude\"\nlocation_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"\natmosphere_tab_id = \"ui-id-6\"\nlightpollution_class = \"stelaction\"\nactions_tab_class = \"checkableaction\"\nactions_tab_datetime_value = \"actionShow_DateTime_Window_Global\"\nactions_button_id = \"bt_doaction\"\nactions_optionvalue_update = \"actionRun_AstroCalc_UpdatePositions\"\nactions_optionvalue_screenshot = \"actionSave_Screenshot_Global\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "location_tab_altitude_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "location_tab_altitude_id = \"loc_altitude\"\nlocation_tab_name_id = \"loc_name\"\natmosphere_tab_id = \"ui-id-6\"\nlightpollution_class = \"stelaction\"\nactions_tab_class = \"checkableaction\"\nactions_tab_datetime_value = \"actionShow_DateTime_Window_Global\"\nactions_button_id = \"bt_doaction\"\nactions_optionvalue_update = \"actionRun_AstroCalc_UpdatePositions\"\nactions_optionvalue_screenshot = \"actionSave_Screenshot_Global\"\nactions_optionvalue_show_starlink = \"actionShow_Satellite_Group_starlink\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "location_tab_name_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "location_tab_name_id = \"loc_name\"\natmosphere_tab_id = \"ui-id-6\"\nlightpollution_class = \"stelaction\"\nactions_tab_class = \"checkableaction\"\nactions_tab_datetime_value = \"actionShow_DateTime_Window_Global\"\nactions_button_id = \"bt_doaction\"\nactions_optionvalue_update = \"actionRun_AstroCalc_UpdatePositions\"\nactions_optionvalue_screenshot = \"actionSave_Screenshot_Global\"\nactions_optionvalue_show_starlink = \"actionShow_Satellite_Group_starlink\"\nactions_optionvalue_show_militarysats = \"actionShow_Satellite_Group_military\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "atmosphere_tab_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "atmosphere_tab_id = \"ui-id-6\"\nlightpollution_class = \"stelaction\"\nactions_tab_class = \"checkableaction\"\nactions_tab_datetime_value = \"actionShow_DateTime_Window_Global\"\nactions_button_id = \"bt_doaction\"\nactions_optionvalue_update = \"actionRun_AstroCalc_UpdatePositions\"\nactions_optionvalue_screenshot = \"actionSave_Screenshot_Global\"\nactions_optionvalue_show_starlink = \"actionShow_Satellite_Group_starlink\"\nactions_optionvalue_show_militarysats = \"actionShow_Satellite_Group_military\"\naddict = {0:\"Date submitted\",",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "lightpollution_class",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "lightpollution_class = \"stelaction\"\nactions_tab_class = \"checkableaction\"\nactions_tab_datetime_value = \"actionShow_DateTime_Window_Global\"\nactions_button_id = \"bt_doaction\"\nactions_optionvalue_update = \"actionRun_AstroCalc_UpdatePositions\"\nactions_optionvalue_screenshot = \"actionSave_Screenshot_Global\"\nactions_optionvalue_show_starlink = \"actionShow_Satellite_Group_starlink\"\nactions_optionvalue_show_militarysats = \"actionShow_Satellite_Group_military\"\naddict = {0:\"Date submitted\",\n                1:\"Date/Time of Event\",",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "actions_tab_class",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "actions_tab_class = \"checkableaction\"\nactions_tab_datetime_value = \"actionShow_DateTime_Window_Global\"\nactions_button_id = \"bt_doaction\"\nactions_optionvalue_update = \"actionRun_AstroCalc_UpdatePositions\"\nactions_optionvalue_screenshot = \"actionSave_Screenshot_Global\"\nactions_optionvalue_show_starlink = \"actionShow_Satellite_Group_starlink\"\nactions_optionvalue_show_militarysats = \"actionShow_Satellite_Group_military\"\naddict = {0:\"Date submitted\",\n                1:\"Date/Time of Event\",\n                2:\"Short Description\",",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "actions_tab_datetime_value",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "actions_tab_datetime_value = \"actionShow_DateTime_Window_Global\"\nactions_button_id = \"bt_doaction\"\nactions_optionvalue_update = \"actionRun_AstroCalc_UpdatePositions\"\nactions_optionvalue_screenshot = \"actionSave_Screenshot_Global\"\nactions_optionvalue_show_starlink = \"actionShow_Satellite_Group_starlink\"\nactions_optionvalue_show_militarysats = \"actionShow_Satellite_Group_military\"\naddict = {0:\"Date submitted\",\n                1:\"Date/Time of Event\",\n                2:\"Short Description\",\n                3:\"Location of Event\",",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "actions_button_id",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "actions_button_id = \"bt_doaction\"\nactions_optionvalue_update = \"actionRun_AstroCalc_UpdatePositions\"\nactions_optionvalue_screenshot = \"actionSave_Screenshot_Global\"\nactions_optionvalue_show_starlink = \"actionShow_Satellite_Group_starlink\"\nactions_optionvalue_show_militarysats = \"actionShow_Satellite_Group_military\"\naddict = {0:\"Date submitted\",\n                1:\"Date/Time of Event\",\n                2:\"Short Description\",\n                3:\"Location of Event\",\n                4:\"Long Description\",",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "actions_optionvalue_update",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "actions_optionvalue_update = \"actionRun_AstroCalc_UpdatePositions\"\nactions_optionvalue_screenshot = \"actionSave_Screenshot_Global\"\nactions_optionvalue_show_starlink = \"actionShow_Satellite_Group_starlink\"\nactions_optionvalue_show_militarysats = \"actionShow_Satellite_Group_military\"\naddict = {0:\"Date submitted\",\n                1:\"Date/Time of Event\",\n                2:\"Short Description\",\n                3:\"Location of Event\",\n                4:\"Long Description\",\n                5:\"Attachments\"}",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "actions_optionvalue_screenshot",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "actions_optionvalue_screenshot = \"actionSave_Screenshot_Global\"\nactions_optionvalue_show_starlink = \"actionShow_Satellite_Group_starlink\"\nactions_optionvalue_show_militarysats = \"actionShow_Satellite_Group_military\"\naddict = {0:\"Date submitted\",\n                1:\"Date/Time of Event\",\n                2:\"Short Description\",\n                3:\"Location of Event\",\n                4:\"Long Description\",\n                5:\"Attachments\"}\nnearest_city_field_x = \"/html/body/center/div[2]/form/table/tbody/tr[8]/td[2]/input\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "actions_optionvalue_show_starlink",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "actions_optionvalue_show_starlink = \"actionShow_Satellite_Group_starlink\"\nactions_optionvalue_show_militarysats = \"actionShow_Satellite_Group_military\"\naddict = {0:\"Date submitted\",\n                1:\"Date/Time of Event\",\n                2:\"Short Description\",\n                3:\"Location of Event\",\n                4:\"Long Description\",\n                5:\"Attachments\"}\nnearest_city_field_x = \"/html/body/center/div[2]/form/table/tbody/tr[8]/td[2]/input\"\nevent_stateusa_x = '//*[@id=\"id_selbox_state_id\"]'",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "actions_optionvalue_show_militarysats",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "actions_optionvalue_show_militarysats = \"actionShow_Satellite_Group_military\"\naddict = {0:\"Date submitted\",\n                1:\"Date/Time of Event\",\n                2:\"Short Description\",\n                3:\"Location of Event\",\n                4:\"Long Description\",\n                5:\"Attachments\"}\nnearest_city_field_x = \"/html/body/center/div[2]/form/table/tbody/tr[8]/td[2]/input\"\nevent_stateusa_x = '//*[@id=\"id_selbox_state_id\"]'\ndescription_x_front = \"/html/body/center/form/table/tbody/tr[\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "addict",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "addict = {0:\"Date submitted\",\n                1:\"Date/Time of Event\",\n                2:\"Short Description\",\n                3:\"Location of Event\",\n                4:\"Long Description\",\n                5:\"Attachments\"}\nnearest_city_field_x = \"/html/body/center/div[2]/form/table/tbody/tr[8]/td[2]/input\"\nevent_stateusa_x = '//*[@id=\"id_selbox_state_id\"]'\ndescription_x_front = \"/html/body/center/form/table/tbody/tr[\"\ndate_sub_x_front = \"/html/body/center/form/table/tbody/tr[\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "nearest_city_field_x",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "nearest_city_field_x = \"/html/body/center/div[2]/form/table/tbody/tr[8]/td[2]/input\"\nevent_stateusa_x = '//*[@id=\"id_selbox_state_id\"]'\ndescription_x_front = \"/html/body/center/form/table/tbody/tr[\"\ndate_sub_x_front = \"/html/body/center/form/table/tbody/tr[\"\ndate_time_front = \"/html/body/center/form/table/tbody/tr[\"\nsdescr_front = \"/html/body/center/form/table/tbody/tr[\"\nlocation_of_event_front = \"/html/body/center/form/table/tbody/tr[\"\nattachments_front = \"/html/body/center/form/table/tbody/tr[\"\ndescription_css_front = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(\"\ndescription_css_end = \") > td:nth-child(6) > input:nth-child(1)\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "event_stateusa_x",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "event_stateusa_x = '//*[@id=\"id_selbox_state_id\"]'\ndescription_x_front = \"/html/body/center/form/table/tbody/tr[\"\ndate_sub_x_front = \"/html/body/center/form/table/tbody/tr[\"\ndate_time_front = \"/html/body/center/form/table/tbody/tr[\"\nsdescr_front = \"/html/body/center/form/table/tbody/tr[\"\nlocation_of_event_front = \"/html/body/center/form/table/tbody/tr[\"\nattachments_front = \"/html/body/center/form/table/tbody/tr[\"\ndescription_css_front = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(\"\ndescription_css_end = \") > td:nth-child(6) > input:nth-child(1)\"\ndescription_x_end = \"]/td[6]/input\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "description_x_front",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "description_x_front = \"/html/body/center/form/table/tbody/tr[\"\ndate_sub_x_front = \"/html/body/center/form/table/tbody/tr[\"\ndate_time_front = \"/html/body/center/form/table/tbody/tr[\"\nsdescr_front = \"/html/body/center/form/table/tbody/tr[\"\nlocation_of_event_front = \"/html/body/center/form/table/tbody/tr[\"\nattachments_front = \"/html/body/center/form/table/tbody/tr[\"\ndescription_css_front = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(\"\ndescription_css_end = \") > td:nth-child(6) > input:nth-child(1)\"\ndescription_x_end = \"]/td[6]/input\"\ndate_sub_x_end = \"]/td[2]\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "date_sub_x_front",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "date_sub_x_front = \"/html/body/center/form/table/tbody/tr[\"\ndate_time_front = \"/html/body/center/form/table/tbody/tr[\"\nsdescr_front = \"/html/body/center/form/table/tbody/tr[\"\nlocation_of_event_front = \"/html/body/center/form/table/tbody/tr[\"\nattachments_front = \"/html/body/center/form/table/tbody/tr[\"\ndescription_css_front = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(\"\ndescription_css_end = \") > td:nth-child(6) > input:nth-child(1)\"\ndescription_x_end = \"]/td[6]/input\"\ndate_sub_x_end = \"]/td[2]\"\ndate_time_end = \"]/td[3]\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "date_time_front",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "date_time_front = \"/html/body/center/form/table/tbody/tr[\"\nsdescr_front = \"/html/body/center/form/table/tbody/tr[\"\nlocation_of_event_front = \"/html/body/center/form/table/tbody/tr[\"\nattachments_front = \"/html/body/center/form/table/tbody/tr[\"\ndescription_css_front = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(\"\ndescription_css_end = \") > td:nth-child(6) > input:nth-child(1)\"\ndescription_x_end = \"]/td[6]/input\"\ndate_sub_x_end = \"]/td[2]\"\ndate_time_end = \"]/td[3]\"\nsdescr_end = \"]/td[4]\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "sdescr_front",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "sdescr_front = \"/html/body/center/form/table/tbody/tr[\"\nlocation_of_event_front = \"/html/body/center/form/table/tbody/tr[\"\nattachments_front = \"/html/body/center/form/table/tbody/tr[\"\ndescription_css_front = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(\"\ndescription_css_end = \") > td:nth-child(6) > input:nth-child(1)\"\ndescription_x_end = \"]/td[6]/input\"\ndate_sub_x_end = \"]/td[2]\"\ndate_time_end = \"]/td[3]\"\nsdescr_end = \"]/td[4]\"\nlocation_of_event_end = \"]/td[5]\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "location_of_event_front",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "location_of_event_front = \"/html/body/center/form/table/tbody/tr[\"\nattachments_front = \"/html/body/center/form/table/tbody/tr[\"\ndescription_css_front = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(\"\ndescription_css_end = \") > td:nth-child(6) > input:nth-child(1)\"\ndescription_x_end = \"]/td[6]/input\"\ndate_sub_x_end = \"]/td[2]\"\ndate_time_end = \"]/td[3]\"\nsdescr_end = \"]/td[4]\"\nlocation_of_event_end = \"]/td[5]\"\nattachments_end = \"]/td[7]\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "attachments_front",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "attachments_front = \"/html/body/center/form/table/tbody/tr[\"\ndescription_css_front = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(\"\ndescription_css_end = \") > td:nth-child(6) > input:nth-child(1)\"\ndescription_x_end = \"]/td[6]/input\"\ndate_sub_x_end = \"]/td[2]\"\ndate_time_end = \"]/td[3]\"\nsdescr_end = \"]/td[4]\"\nlocation_of_event_end = \"]/td[5]\"\nattachments_end = \"]/td[7]\"\nkeywordfield_x = \"/html/body/center/div[2]/form/table/tbody/tr[9]/td[2]/input[1]\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "description_css_front",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "description_css_front = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(\"\ndescription_css_end = \") > td:nth-child(6) > input:nth-child(1)\"\ndescription_x_end = \"]/td[6]/input\"\ndate_sub_x_end = \"]/td[2]\"\ndate_time_end = \"]/td[3]\"\nsdescr_end = \"]/td[4]\"\nlocation_of_event_end = \"]/td[5]\"\nattachments_end = \"]/td[7]\"\nkeywordfield_x = \"/html/body/center/div[2]/form/table/tbody/tr[9]/td[2]/input[1]\"\ndate_of_event_x = \"/html/body/center/div[2]/form/table/tbody/tr[2]/td[2]/input[5]\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "description_css_end",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "description_css_end = \") > td:nth-child(6) > input:nth-child(1)\"\ndescription_x_end = \"]/td[6]/input\"\ndate_sub_x_end = \"]/td[2]\"\ndate_time_end = \"]/td[3]\"\nsdescr_end = \"]/td[4]\"\nlocation_of_event_end = \"]/td[5]\"\nattachments_end = \"]/td[7]\"\nkeywordfield_x = \"/html/body/center/div[2]/form/table/tbody/tr[9]/td[2]/input[1]\"\ndate_of_event_x = \"/html/body/center/div[2]/form/table/tbody/tr[2]/td[2]/input[5]\"\nsubmit_button_x = \"/html/body/center/div[2]/form/input[2]\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "description_x_end",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "description_x_end = \"]/td[6]/input\"\ndate_sub_x_end = \"]/td[2]\"\ndate_time_end = \"]/td[3]\"\nsdescr_end = \"]/td[4]\"\nlocation_of_event_end = \"]/td[5]\"\nattachments_end = \"]/td[7]\"\nkeywordfield_x = \"/html/body/center/div[2]/form/table/tbody/tr[9]/td[2]/input[1]\"\ndate_of_event_x = \"/html/body/center/div[2]/form/table/tbody/tr[2]/td[2]/input[5]\"\nsubmit_button_x = \"/html/body/center/div[2]/form/input[2]\"\npagerows = 50",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "date_sub_x_end",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "date_sub_x_end = \"]/td[2]\"\ndate_time_end = \"]/td[3]\"\nsdescr_end = \"]/td[4]\"\nlocation_of_event_end = \"]/td[5]\"\nattachments_end = \"]/td[7]\"\nkeywordfield_x = \"/html/body/center/div[2]/form/table/tbody/tr[9]/td[2]/input[1]\"\ndate_of_event_x = \"/html/body/center/div[2]/form/table/tbody/tr[2]/td[2]/input[5]\"\nsubmit_button_x = \"/html/body/center/div[2]/form/input[2]\"\npagerows = 50\ntimestamp_string = str(datetime.now())",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "date_time_end",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "date_time_end = \"]/td[3]\"\nsdescr_end = \"]/td[4]\"\nlocation_of_event_end = \"]/td[5]\"\nattachments_end = \"]/td[7]\"\nkeywordfield_x = \"/html/body/center/div[2]/form/table/tbody/tr[9]/td[2]/input[1]\"\ndate_of_event_x = \"/html/body/center/div[2]/form/table/tbody/tr[2]/td[2]/input[5]\"\nsubmit_button_x = \"/html/body/center/div[2]/form/input[2]\"\npagerows = 50\ntimestamp_string = str(datetime.now())\npopup_text = \"/html/body/center/table/tbody/tr[2]/td\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "sdescr_end",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "sdescr_end = \"]/td[4]\"\nlocation_of_event_end = \"]/td[5]\"\nattachments_end = \"]/td[7]\"\nkeywordfield_x = \"/html/body/center/div[2]/form/table/tbody/tr[9]/td[2]/input[1]\"\ndate_of_event_x = \"/html/body/center/div[2]/form/table/tbody/tr[2]/td[2]/input[5]\"\nsubmit_button_x = \"/html/body/center/div[2]/form/input[2]\"\npagerows = 50\ntimestamp_string = str(datetime.now())\npopup_text = \"/html/body/center/table/tbody/tr[2]/td\"\npopup_x_text = \"/html/body/center/table/tbody/tr[2]/td\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "location_of_event_end",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "location_of_event_end = \"]/td[5]\"\nattachments_end = \"]/td[7]\"\nkeywordfield_x = \"/html/body/center/div[2]/form/table/tbody/tr[9]/td[2]/input[1]\"\ndate_of_event_x = \"/html/body/center/div[2]/form/table/tbody/tr[2]/td[2]/input[5]\"\nsubmit_button_x = \"/html/body/center/div[2]/form/input[2]\"\npagerows = 50\ntimestamp_string = str(datetime.now())\npopup_text = \"/html/body/center/table/tbody/tr[2]/td\"\npopup_x_text = \"/html/body/center/table/tbody/tr[2]/td\"\npopup_text_x_button = \"/html/body/center/form/table/tbody/tr[3]/td[6]/input\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "attachments_end",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "attachments_end = \"]/td[7]\"\nkeywordfield_x = \"/html/body/center/div[2]/form/table/tbody/tr[9]/td[2]/input[1]\"\ndate_of_event_x = \"/html/body/center/div[2]/form/table/tbody/tr[2]/td[2]/input[5]\"\nsubmit_button_x = \"/html/body/center/div[2]/form/input[2]\"\npagerows = 50\ntimestamp_string = str(datetime.now())\npopup_text = \"/html/body/center/table/tbody/tr[2]/td\"\npopup_x_text = \"/html/body/center/table/tbody/tr[2]/td\"\npopup_text_x_button = \"/html/body/center/form/table/tbody/tr[3]/td[6]/input\"\ncasesfound_css = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(1) > td:nth-child(1) > font:nth-child(1)\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "keywordfield_x",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "keywordfield_x = \"/html/body/center/div[2]/form/table/tbody/tr[9]/td[2]/input[1]\"\ndate_of_event_x = \"/html/body/center/div[2]/form/table/tbody/tr[2]/td[2]/input[5]\"\nsubmit_button_x = \"/html/body/center/div[2]/form/input[2]\"\npagerows = 50\ntimestamp_string = str(datetime.now())\npopup_text = \"/html/body/center/table/tbody/tr[2]/td\"\npopup_x_text = \"/html/body/center/table/tbody/tr[2]/td\"\npopup_text_x_button = \"/html/body/center/form/table/tbody/tr[3]/td[6]/input\"\ncasesfound_css = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(1) > td:nth-child(1) > font:nth-child(1)\"\nxfiles_original_airdate_x_front = \"/html/body/font[3]/table[1]/tbody/tr[\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "date_of_event_x",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "date_of_event_x = \"/html/body/center/div[2]/form/table/tbody/tr[2]/td[2]/input[5]\"\nsubmit_button_x = \"/html/body/center/div[2]/form/input[2]\"\npagerows = 50\ntimestamp_string = str(datetime.now())\npopup_text = \"/html/body/center/table/tbody/tr[2]/td\"\npopup_x_text = \"/html/body/center/table/tbody/tr[2]/td\"\npopup_text_x_button = \"/html/body/center/form/table/tbody/tr[3]/td[6]/input\"\ncasesfound_css = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(1) > td:nth-child(1) > font:nth-child(1)\"\nxfiles_original_airdate_x_front = \"/html/body/font[3]/table[1]/tbody/tr[\"\nxfiles_original_airdate_x_end = \"]/td[3]\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "submit_button_x",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "submit_button_x = \"/html/body/center/div[2]/form/input[2]\"\npagerows = 50\ntimestamp_string = str(datetime.now())\npopup_text = \"/html/body/center/table/tbody/tr[2]/td\"\npopup_x_text = \"/html/body/center/table/tbody/tr[2]/td\"\npopup_text_x_button = \"/html/body/center/form/table/tbody/tr[3]/td[6]/input\"\ncasesfound_css = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(1) > td:nth-child(1) > font:nth-child(1)\"\nxfiles_original_airdate_x_front = \"/html/body/font[3]/table[1]/tbody/tr[\"\nxfiles_original_airdate_x_end = \"]/td[3]\"\nancient_aliens_original_airdate_x_front = \"\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "pagerows",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "pagerows = 50\ntimestamp_string = str(datetime.now())\npopup_text = \"/html/body/center/table/tbody/tr[2]/td\"\npopup_x_text = \"/html/body/center/table/tbody/tr[2]/td\"\npopup_text_x_button = \"/html/body/center/form/table/tbody/tr[3]/td[6]/input\"\ncasesfound_css = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(1) > td:nth-child(1) > font:nth-child(1)\"\nxfiles_original_airdate_x_front = \"/html/body/font[3]/table[1]/tbody/tr[\"\nxfiles_original_airdate_x_end = \"]/td[3]\"\nancient_aliens_original_airdate_x_front = \"\"\nancient_aliens_original_airdate_x_front = \"\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "timestamp_string",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "timestamp_string = str(datetime.now())\npopup_text = \"/html/body/center/table/tbody/tr[2]/td\"\npopup_x_text = \"/html/body/center/table/tbody/tr[2]/td\"\npopup_text_x_button = \"/html/body/center/form/table/tbody/tr[3]/td[6]/input\"\ncasesfound_css = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(1) > td:nth-child(1) > font:nth-child(1)\"\nxfiles_original_airdate_x_front = \"/html/body/font[3]/table[1]/tbody/tr[\"\nxfiles_original_airdate_x_end = \"]/td[3]\"\nancient_aliens_original_airdate_x_front = \"\"\nancient_aliens_original_airdate_x_front = \"\"\ntopics = ['low in the sky','line formation','bright','green','blue','fbi was there','swat','I saw police','Angels','lights in a line','strange light','cave']",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "popup_text",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "popup_text = \"/html/body/center/table/tbody/tr[2]/td\"\npopup_x_text = \"/html/body/center/table/tbody/tr[2]/td\"\npopup_text_x_button = \"/html/body/center/form/table/tbody/tr[3]/td[6]/input\"\ncasesfound_css = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(1) > td:nth-child(1) > font:nth-child(1)\"\nxfiles_original_airdate_x_front = \"/html/body/font[3]/table[1]/tbody/tr[\"\nxfiles_original_airdate_x_end = \"]/td[3]\"\nancient_aliens_original_airdate_x_front = \"\"\nancient_aliens_original_airdate_x_front = \"\"\ntopics = ['low in the sky','line formation','bright','green','blue','fbi was there','swat','I saw police','Angels','lights in a line','strange light','cave']\nbuzzwords = ['God','Jesus','Heaven']",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "popup_x_text",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "popup_x_text = \"/html/body/center/table/tbody/tr[2]/td\"\npopup_text_x_button = \"/html/body/center/form/table/tbody/tr[3]/td[6]/input\"\ncasesfound_css = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(1) > td:nth-child(1) > font:nth-child(1)\"\nxfiles_original_airdate_x_front = \"/html/body/font[3]/table[1]/tbody/tr[\"\nxfiles_original_airdate_x_end = \"]/td[3]\"\nancient_aliens_original_airdate_x_front = \"\"\nancient_aliens_original_airdate_x_front = \"\"\ntopics = ['low in the sky','line formation','bright','green','blue','fbi was there','swat','I saw police','Angels','lights in a line','strange light','cave']\nbuzzwords = ['God','Jesus','Heaven']\nodd_words = ['spouse']",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "popup_text_x_button",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "popup_text_x_button = \"/html/body/center/form/table/tbody/tr[3]/td[6]/input\"\ncasesfound_css = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(1) > td:nth-child(1) > font:nth-child(1)\"\nxfiles_original_airdate_x_front = \"/html/body/font[3]/table[1]/tbody/tr[\"\nxfiles_original_airdate_x_end = \"]/td[3]\"\nancient_aliens_original_airdate_x_front = \"\"\nancient_aliens_original_airdate_x_front = \"\"\ntopics = ['low in the sky','line formation','bright','green','blue','fbi was there','swat','I saw police','Angels','lights in a line','strange light','cave']\nbuzzwords = ['God','Jesus','Heaven']\nodd_words = ['spouse']\nMain_Cities = ['','Austin','Miami','Reno','Tinley Park','New York','Houston','El Paso']",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "casesfound_css",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "casesfound_css = \"body > center:nth-child(1) > form:nth-child(4) > table:nth-child(1) > tbody:nth-child(1) > tr:nth-child(1) > td:nth-child(1) > font:nth-child(1)\"\nxfiles_original_airdate_x_front = \"/html/body/font[3]/table[1]/tbody/tr[\"\nxfiles_original_airdate_x_end = \"]/td[3]\"\nancient_aliens_original_airdate_x_front = \"\"\nancient_aliens_original_airdate_x_front = \"\"\ntopics = ['low in the sky','line formation','bright','green','blue','fbi was there','swat','I saw police','Angels','lights in a line','strange light','cave']\nbuzzwords = ['God','Jesus','Heaven']\nodd_words = ['spouse']\nMain_Cities = ['','Austin','Miami','Reno','Tinley Park','New York','Houston','El Paso']\nMain_HotSpots = {'Tinley Park':['10/2004','10/2005']}",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "xfiles_original_airdate_x_front",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "xfiles_original_airdate_x_front = \"/html/body/font[3]/table[1]/tbody/tr[\"\nxfiles_original_airdate_x_end = \"]/td[3]\"\nancient_aliens_original_airdate_x_front = \"\"\nancient_aliens_original_airdate_x_front = \"\"\ntopics = ['low in the sky','line formation','bright','green','blue','fbi was there','swat','I saw police','Angels','lights in a line','strange light','cave']\nbuzzwords = ['God','Jesus','Heaven']\nodd_words = ['spouse']\nMain_Cities = ['','Austin','Miami','Reno','Tinley Park','New York','Houston','El Paso']\nMain_HotSpots = {'Tinley Park':['10/2004','10/2005']}\nPrimary_States = ['Utah','Idaho','Montana','West Virginia','New Hampshire','Maine']",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "xfiles_original_airdate_x_end",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "xfiles_original_airdate_x_end = \"]/td[3]\"\nancient_aliens_original_airdate_x_front = \"\"\nancient_aliens_original_airdate_x_front = \"\"\ntopics = ['low in the sky','line formation','bright','green','blue','fbi was there','swat','I saw police','Angels','lights in a line','strange light','cave']\nbuzzwords = ['God','Jesus','Heaven']\nodd_words = ['spouse']\nMain_Cities = ['','Austin','Miami','Reno','Tinley Park','New York','Houston','El Paso']\nMain_HotSpots = {'Tinley Park':['10/2004','10/2005']}\nPrimary_States = ['Utah','Idaho','Montana','West Virginia','New Hampshire','Maine']\nCities_to_avoid = ['Chicago']",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "ancient_aliens_original_airdate_x_front",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "ancient_aliens_original_airdate_x_front = \"\"\nancient_aliens_original_airdate_x_front = \"\"\ntopics = ['low in the sky','line formation','bright','green','blue','fbi was there','swat','I saw police','Angels','lights in a line','strange light','cave']\nbuzzwords = ['God','Jesus','Heaven']\nodd_words = ['spouse']\nMain_Cities = ['','Austin','Miami','Reno','Tinley Park','New York','Houston','El Paso']\nMain_HotSpots = {'Tinley Park':['10/2004','10/2005']}\nPrimary_States = ['Utah','Idaho','Montana','West Virginia','New Hampshire','Maine']\nCities_to_avoid = ['Chicago']\nanother_search_x = \"/html/body/center/form/input[1]\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "ancient_aliens_original_airdate_x_front",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "ancient_aliens_original_airdate_x_front = \"\"\ntopics = ['low in the sky','line formation','bright','green','blue','fbi was there','swat','I saw police','Angels','lights in a line','strange light','cave']\nbuzzwords = ['God','Jesus','Heaven']\nodd_words = ['spouse']\nMain_Cities = ['','Austin','Miami','Reno','Tinley Park','New York','Houston','El Paso']\nMain_HotSpots = {'Tinley Park':['10/2004','10/2005']}\nPrimary_States = ['Utah','Idaho','Montana','West Virginia','New Hampshire','Maine']\nCities_to_avoid = ['Chicago']\nanother_search_x = \"/html/body/center/form/input[1]\"\ndef scrollment():",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "topics",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "topics = ['low in the sky','line formation','bright','green','blue','fbi was there','swat','I saw police','Angels','lights in a line','strange light','cave']\nbuzzwords = ['God','Jesus','Heaven']\nodd_words = ['spouse']\nMain_Cities = ['','Austin','Miami','Reno','Tinley Park','New York','Houston','El Paso']\nMain_HotSpots = {'Tinley Park':['10/2004','10/2005']}\nPrimary_States = ['Utah','Idaho','Montana','West Virginia','New Hampshire','Maine']\nCities_to_avoid = ['Chicago']\nanother_search_x = \"/html/body/center/form/input[1]\"\ndef scrollment():\n    ic()",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "buzzwords",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "buzzwords = ['God','Jesus','Heaven']\nodd_words = ['spouse']\nMain_Cities = ['','Austin','Miami','Reno','Tinley Park','New York','Houston','El Paso']\nMain_HotSpots = {'Tinley Park':['10/2004','10/2005']}\nPrimary_States = ['Utah','Idaho','Montana','West Virginia','New Hampshire','Maine']\nCities_to_avoid = ['Chicago']\nanother_search_x = \"/html/body/center/form/input[1]\"\ndef scrollment():\n    ic()\n    readme",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "odd_words",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "odd_words = ['spouse']\nMain_Cities = ['','Austin','Miami','Reno','Tinley Park','New York','Houston','El Paso']\nMain_HotSpots = {'Tinley Park':['10/2004','10/2005']}\nPrimary_States = ['Utah','Idaho','Montana','West Virginia','New Hampshire','Maine']\nCities_to_avoid = ['Chicago']\nanother_search_x = \"/html/body/center/form/input[1]\"\ndef scrollment():\n    ic()\n    readme\n    scrolls down one page length to see invisible content.",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "Main_Cities",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "Main_Cities = ['','Austin','Miami','Reno','Tinley Park','New York','Houston','El Paso']\nMain_HotSpots = {'Tinley Park':['10/2004','10/2005']}\nPrimary_States = ['Utah','Idaho','Montana','West Virginia','New Hampshire','Maine']\nCities_to_avoid = ['Chicago']\nanother_search_x = \"/html/body/center/form/input[1]\"\ndef scrollment():\n    ic()\n    readme\n    scrolls down one page length to see invisible content.\n    driver.execute_script(\"window.scrollTo(0,document.body.scrollHeight-1)\")",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "Main_HotSpots",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "Main_HotSpots = {'Tinley Park':['10/2004','10/2005']}\nPrimary_States = ['Utah','Idaho','Montana','West Virginia','New Hampshire','Maine']\nCities_to_avoid = ['Chicago']\nanother_search_x = \"/html/body/center/form/input[1]\"\ndef scrollment():\n    ic()\n    readme\n    scrolls down one page length to see invisible content.\n    driver.execute_script(\"window.scrollTo(0,document.body.scrollHeight-1)\")\ndef shifty(bottom,top):",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "Primary_States",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "Primary_States = ['Utah','Idaho','Montana','West Virginia','New Hampshire','Maine']\nCities_to_avoid = ['Chicago']\nanother_search_x = \"/html/body/center/form/input[1]\"\ndef scrollment():\n    ic()\n    readme\n    scrolls down one page length to see invisible content.\n    driver.execute_script(\"window.scrollTo(0,document.body.scrollHeight-1)\")\ndef shifty(bottom,top):\n    ic()",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "Cities_to_avoid",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "Cities_to_avoid = ['Chicago']\nanother_search_x = \"/html/body/center/form/input[1]\"\ndef scrollment():\n    ic()\n    readme\n    scrolls down one page length to see invisible content.\n    driver.execute_script(\"window.scrollTo(0,document.body.scrollHeight-1)\")\ndef shifty(bottom,top):\n    ic()\n    temp = 0",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "another_search_x",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "another_search_x = \"/html/body/center/form/input[1]\"\ndef scrollment():\n    ic()\n    readme\n    scrolls down one page length to see invisible content.\n    driver.execute_script(\"window.scrollTo(0,document.body.scrollHeight-1)\")\ndef shifty(bottom,top):\n    ic()\n    temp = 0\n    if bottom > top:",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "city",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "city = 'Orlando'\ndef convert_csv_to_dict(filename):\n    ic()\n    import csv\n    csv_reader = csv.DictReader(csv_file)\n    line_count = 0\n    for row in csv_reader:\n        if line_count == 0:\n            print(f'Column names are {\", \".join(row)}')\n            line_count += 1",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "result = geopy_city_to_coordinates(\"Austin\",\"Texas\")\nvar = finding_nemopolis(\"Austin\",\"Texas\")\nic(var)\nic(result)\nloc_data = finding_nemopolis('Austin','Texas')\nloc_data2 = finding_nemopolis('San Diego','California')\ndistance = chasm_between(loc_data,loc_data2)\ncoordinates_file = open(\"citiescoordinates.txt\",\"w+\")\ncoordinates_file.write(\"city,state_id\\n\")\ncoordinates_file.close()",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "var",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "var = finding_nemopolis(\"Austin\",\"Texas\")\nic(var)\nic(result)\nloc_data = finding_nemopolis('Austin','Texas')\nloc_data2 = finding_nemopolis('San Diego','California')\ndistance = chasm_between(loc_data,loc_data2)\ncoordinates_file = open(\"citiescoordinates.txt\",\"w+\")\ncoordinates_file.write(\"city,state_id\\n\")\ncoordinates_file.close()\ncities = open(\"citiestocheck.csv\",'r')",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "loc_data",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "loc_data = finding_nemopolis('Austin','Texas')\nloc_data2 = finding_nemopolis('San Diego','California')\ndistance = chasm_between(loc_data,loc_data2)\ncoordinates_file = open(\"citiescoordinates.txt\",\"w+\")\ncoordinates_file.write(\"city,state_id\\n\")\ncoordinates_file.close()\ncities = open(\"citiestocheck.csv\",'r')\ncommas = 0\nnewcity = \"\"\nnewstate = \"\"",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "loc_data2",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "loc_data2 = finding_nemopolis('San Diego','California')\ndistance = chasm_between(loc_data,loc_data2)\ncoordinates_file = open(\"citiescoordinates.txt\",\"w+\")\ncoordinates_file.write(\"city,state_id\\n\")\ncoordinates_file.close()\ncities = open(\"citiestocheck.csv\",'r')\ncommas = 0\nnewcity = \"\"\nnewstate = \"\"\nfor city in tqdm(cities):",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "distance",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "distance = chasm_between(loc_data,loc_data2)\ncoordinates_file = open(\"citiescoordinates.txt\",\"w+\")\ncoordinates_file.write(\"city,state_id\\n\")\ncoordinates_file.close()\ncities = open(\"citiestocheck.csv\",'r')\ncommas = 0\nnewcity = \"\"\nnewstate = \"\"\nfor city in tqdm(cities):\n    if city != \"\\ufeffcity, state_id\\n\":",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "coordinates_file",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "coordinates_file = open(\"citiescoordinates.txt\",\"w+\")\ncoordinates_file.write(\"city,state_id\\n\")\ncoordinates_file.close()\ncities = open(\"citiestocheck.csv\",'r')\ncommas = 0\nnewcity = \"\"\nnewstate = \"\"\nfor city in tqdm(cities):\n    if city != \"\\ufeffcity, state_id\\n\":\n        coordinates_file = open(\"citiescoordinates.txt\",\"a+\")",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "cities",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "cities = open(\"citiestocheck.csv\",'r')\ncommas = 0\nnewcity = \"\"\nnewstate = \"\"\nfor city in tqdm(cities):\n    if city != \"\\ufeffcity, state_id\\n\":\n        coordinates_file = open(\"citiescoordinates.txt\",\"a+\")\n        coordinates = \"\"\n        for i in city:\n            if i == ',':",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "commas",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "commas = 0\nnewcity = \"\"\nnewstate = \"\"\nfor city in tqdm(cities):\n    if city != \"\\ufeffcity, state_id\\n\":\n        coordinates_file = open(\"citiescoordinates.txt\",\"a+\")\n        coordinates = \"\"\n        for i in city:\n            if i == ',':\n                commas += 1",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "newcity",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "newcity = \"\"\nnewstate = \"\"\nfor city in tqdm(cities):\n    if city != \"\\ufeffcity, state_id\\n\":\n        coordinates_file = open(\"citiescoordinates.txt\",\"a+\")\n        coordinates = \"\"\n        for i in city:\n            if i == ',':\n                commas += 1\n            else:",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "newstate",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "newstate = \"\"\nfor city in tqdm(cities):\n    if city != \"\\ufeffcity, state_id\\n\":\n        coordinates_file = open(\"citiescoordinates.txt\",\"a+\")\n        coordinates = \"\"\n        for i in city:\n            if i == ',':\n                commas += 1\n            else:\n                if commas == 0:",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": "project.legacy_files.original_code_nocomments",
        "description": "project.legacy_files.original_code_nocomments",
        "peekOfCode": "results = point_finder(30.2711286,-97.7436995)\nic(results)",
        "detail": "project.legacy_files.original_code_nocomments",
        "documentation": {}
    },
    {
        "label": "nsaurl",
        "kind": 5,
        "importPath": "project.legacy_files.ufodownloader",
        "description": "project.legacy_files.ufodownloader",
        "peekOfCode": "nsaurl = \"https://www.nsa.gov/news-features/declassified-documents/ufo/\"\n'''\nthese are the links\nstarting with the first part of 16 files on ufos in the database these links are sequential\nhttps://vault.fbi.gov/UFO/UFO%20Part%201%20of%2016/view\nand they end at this link below\nhttps://vault.fbi.gov/UFO/UFO%20Part%2016%20of%2016/view\nthis is the mufon gallery url\nhttps://ufostalker.com/gallery\nhttps://www.worldufophotos.org/page/send-your-photos/#/gallery/top-200-ufo-photos/top-200-3-18-20-shropshire-england-mufon/",
        "detail": "project.legacy_files.ufodownloader",
        "documentation": {}
    },
    {
        "label": "choice",
        "kind": 5,
        "importPath": "project.legacy_files.ufodownloader",
        "description": "project.legacy_files.ufodownloader",
        "peekOfCode": "choice = input(\"for nsaurl enter 2: \")\nchoice = int(choice)\n#?end input section\n#? FBI list\nlinks = []\niterator = 1\ninitial = \"https://vault.fbi.gov/UFO/UFO%20Part%20\"\npreending = \"%\"\npostending = \"20of%2016/view\"\nending = preending + postending #this combines to create the end of the url",
        "detail": "project.legacy_files.ufodownloader",
        "documentation": {}
    },
    {
        "label": "choice",
        "kind": 5,
        "importPath": "project.legacy_files.ufodownloader",
        "description": "project.legacy_files.ufodownloader",
        "peekOfCode": "choice = int(choice)\n#?end input section\n#? FBI list\nlinks = []\niterator = 1\ninitial = \"https://vault.fbi.gov/UFO/UFO%20Part%20\"\npreending = \"%\"\npostending = \"20of%2016/view\"\nending = preending + postending #this combines to create the end of the url\ntop = 16",
        "detail": "project.legacy_files.ufodownloader",
        "documentation": {}
    },
    {
        "label": "links",
        "kind": 5,
        "importPath": "project.legacy_files.ufodownloader",
        "description": "project.legacy_files.ufodownloader",
        "peekOfCode": "links = []\niterator = 1\ninitial = \"https://vault.fbi.gov/UFO/UFO%20Part%20\"\npreending = \"%\"\npostending = \"20of%2016/view\"\nending = preending + postending #this combines to create the end of the url\ntop = 16\nwhile iterator < top:\n    url = initial + str(iterator) + ending\n    links.append(str(url))",
        "detail": "project.legacy_files.ufodownloader",
        "documentation": {}
    },
    {
        "label": "iterator",
        "kind": 5,
        "importPath": "project.legacy_files.ufodownloader",
        "description": "project.legacy_files.ufodownloader",
        "peekOfCode": "iterator = 1\ninitial = \"https://vault.fbi.gov/UFO/UFO%20Part%20\"\npreending = \"%\"\npostending = \"20of%2016/view\"\nending = preending + postending #this combines to create the end of the url\ntop = 16\nwhile iterator < top:\n    url = initial + str(iterator) + ending\n    links.append(str(url))\n    iterator += 1 #iterate up one",
        "detail": "project.legacy_files.ufodownloader",
        "documentation": {}
    },
    {
        "label": "initial",
        "kind": 5,
        "importPath": "project.legacy_files.ufodownloader",
        "description": "project.legacy_files.ufodownloader",
        "peekOfCode": "initial = \"https://vault.fbi.gov/UFO/UFO%20Part%20\"\npreending = \"%\"\npostending = \"20of%2016/view\"\nending = preending + postending #this combines to create the end of the url\ntop = 16\nwhile iterator < top:\n    url = initial + str(iterator) + ending\n    links.append(str(url))\n    iterator += 1 #iterate up one\n#? end FBI list",
        "detail": "project.legacy_files.ufodownloader",
        "documentation": {}
    },
    {
        "label": "preending",
        "kind": 5,
        "importPath": "project.legacy_files.ufodownloader",
        "description": "project.legacy_files.ufodownloader",
        "peekOfCode": "preending = \"%\"\npostending = \"20of%2016/view\"\nending = preending + postending #this combines to create the end of the url\ntop = 16\nwhile iterator < top:\n    url = initial + str(iterator) + ending\n    links.append(str(url))\n    iterator += 1 #iterate up one\n#? end FBI list\nif choice == 2:",
        "detail": "project.legacy_files.ufodownloader",
        "documentation": {}
    },
    {
        "label": "postending",
        "kind": 5,
        "importPath": "project.legacy_files.ufodownloader",
        "description": "project.legacy_files.ufodownloader",
        "peekOfCode": "postending = \"20of%2016/view\"\nending = preending + postending #this combines to create the end of the url\ntop = 16\nwhile iterator < top:\n    url = initial + str(iterator) + ending\n    links.append(str(url))\n    iterator += 1 #iterate up one\n#? end FBI list\nif choice == 2:\n    links = []",
        "detail": "project.legacy_files.ufodownloader",
        "documentation": {}
    },
    {
        "label": "ending",
        "kind": 5,
        "importPath": "project.legacy_files.ufodownloader",
        "description": "project.legacy_files.ufodownloader",
        "peekOfCode": "ending = preending + postending #this combines to create the end of the url\ntop = 16\nwhile iterator < top:\n    url = initial + str(iterator) + ending\n    links.append(str(url))\n    iterator += 1 #iterate up one\n#? end FBI list\nif choice == 2:\n    links = []\n    links.append(nsaurl)",
        "detail": "project.legacy_files.ufodownloader",
        "documentation": {}
    },
    {
        "label": "top",
        "kind": 5,
        "importPath": "project.legacy_files.ufodownloader",
        "description": "project.legacy_files.ufodownloader",
        "peekOfCode": "top = 16\nwhile iterator < top:\n    url = initial + str(iterator) + ending\n    links.append(str(url))\n    iterator += 1 #iterate up one\n#? end FBI list\nif choice == 2:\n    links = []\n    links.append(nsaurl)\n#? MUFON list",
        "detail": "project.legacy_files.ufodownloader",
        "documentation": {}
    },
    {
        "label": "get_elevations",
        "kind": 2,
        "importPath": "project.scripts.coordinatefinder",
        "description": "project.scripts.coordinatefinder",
        "peekOfCode": "def get_elevations(coordinates, API_KEY, rate_limit=10, batch_size=100, df=None):\n    # only keep the coordinates that don't have an elevation already in the dataframe\n    if df is not None:\n        try:\n            coordinates = [c for c in coordinates if pd.isnull(df.loc[(df['latitude'] == float(c.split(',')[0])) & (df['longitude'] == float(c.split(',')[1])), 'elevation'])]\n        except:\n            pass\n    # coordinates must be in the format \"lat,lng\" or \"lat,lng|lat,lng|lat,lng\" etc.\n    coordinates = [c for c in coordinates if len(c.split(',')) == 2] # remove any coordinates that don't have a lat and a long separated by a comma\n    coordinates = [c for c in coordinates if c.split(',')[0] != 'nan'] # remove any coordinates that have a NaN for the latitude",
        "detail": "project.scripts.coordinatefinder",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "project.scripts.coordinatefinder",
        "description": "project.scripts.coordinatefinder",
        "peekOfCode": "df = pd.read_csv('./project/data/ufo_clean.csv', low_memory=False)\nimport requests\nimport json\nimport time\nfrom tqdm import tqdm\n# import api key from secrets.json\napi_key = json.load(open('./project/notebooks/secrets.json'))['google_maps_api_key']\ndef get_elevations(coordinates, API_KEY, rate_limit=10, batch_size=100, df=None):\n    # only keep the coordinates that don't have an elevation already in the dataframe\n    if df is not None:",
        "detail": "project.scripts.coordinatefinder",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "project.scripts.coordinatefinder",
        "description": "project.scripts.coordinatefinder",
        "peekOfCode": "api_key = json.load(open('./project/notebooks/secrets.json'))['google_maps_api_key']\ndef get_elevations(coordinates, API_KEY, rate_limit=10, batch_size=100, df=None):\n    # only keep the coordinates that don't have an elevation already in the dataframe\n    if df is not None:\n        try:\n            coordinates = [c for c in coordinates if pd.isnull(df.loc[(df['latitude'] == float(c.split(',')[0])) & (df['longitude'] == float(c.split(',')[1])), 'elevation'])]\n        except:\n            pass\n    # coordinates must be in the format \"lat,lng\" or \"lat,lng|lat,lng|lat,lng\" etc.\n    coordinates = [c for c in coordinates if len(c.split(',')) == 2] # remove any coordinates that don't have a lat and a long separated by a comma",
        "detail": "project.scripts.coordinatefinder",
        "documentation": {}
    },
    {
        "label": "api_key",
        "kind": 5,
        "importPath": "project.scripts.googlemaps_elevation",
        "description": "project.scripts.googlemaps_elevation",
        "peekOfCode": "api_key = \"YOUR_API_KEY\"\n# Specify the coordinates for the location you want to get the elevation for\nlatitude = 37.4224082\nlongitude = -122.0856086\n# Make a GET request to the Elevation API\nresponse = requests.get(f\"https://maps.googleapis.com/maps/api/elevation/json?locations={latitude},{longitude}&key={api_key}\")\n# If the request was successful, print the elevation of the location\nif response.status_code == 200:\n    data = response.json()\n    elevation = data[\"results\"][0][\"elevation\"]",
        "detail": "project.scripts.googlemaps_elevation",
        "documentation": {}
    },
    {
        "label": "latitude",
        "kind": 5,
        "importPath": "project.scripts.googlemaps_elevation",
        "description": "project.scripts.googlemaps_elevation",
        "peekOfCode": "latitude = 37.4224082\nlongitude = -122.0856086\n# Make a GET request to the Elevation API\nresponse = requests.get(f\"https://maps.googleapis.com/maps/api/elevation/json?locations={latitude},{longitude}&key={api_key}\")\n# If the request was successful, print the elevation of the location\nif response.status_code == 200:\n    data = response.json()\n    elevation = data[\"results\"][0][\"elevation\"]\n    print(f\"The elevation of the location is {elevation} meters\")\nelse:",
        "detail": "project.scripts.googlemaps_elevation",
        "documentation": {}
    },
    {
        "label": "longitude",
        "kind": 5,
        "importPath": "project.scripts.googlemaps_elevation",
        "description": "project.scripts.googlemaps_elevation",
        "peekOfCode": "longitude = -122.0856086\n# Make a GET request to the Elevation API\nresponse = requests.get(f\"https://maps.googleapis.com/maps/api/elevation/json?locations={latitude},{longitude}&key={api_key}\")\n# If the request was successful, print the elevation of the location\nif response.status_code == 200:\n    data = response.json()\n    elevation = data[\"results\"][0][\"elevation\"]\n    print(f\"The elevation of the location is {elevation} meters\")\nelse:\n    print(\"Something went wrong\")",
        "detail": "project.scripts.googlemaps_elevation",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "project.scripts.googlemaps_elevation",
        "description": "project.scripts.googlemaps_elevation",
        "peekOfCode": "response = requests.get(f\"https://maps.googleapis.com/maps/api/elevation/json?locations={latitude},{longitude}&key={api_key}\")\n# If the request was successful, print the elevation of the location\nif response.status_code == 200:\n    data = response.json()\n    elevation = data[\"results\"][0][\"elevation\"]\n    print(f\"The elevation of the location is {elevation} meters\")\nelse:\n    print(\"Something went wrong\")\nresponse = requests.get(f\"https://maps.googleapis.com/maps/api/elevation/json?locations=39.7391536,-104.9847034|36.455556,-116.866667&key={api_key}\")",
        "detail": "project.scripts.googlemaps_elevation",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "project.scripts.googlemaps_elevation",
        "description": "project.scripts.googlemaps_elevation",
        "peekOfCode": "response = requests.get(f\"https://maps.googleapis.com/maps/api/elevation/json?locations=39.7391536,-104.9847034|36.455556,-116.866667&key={api_key}\")",
        "detail": "project.scripts.googlemaps_elevation",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "df = pd.read_csv(\"./project_folder/data/processed/ufos_processed.csv\", low_memory=False, on_bad_lines= 'skip')\n# Convert the latitude and longitude to radians\ndf['latitude_rad'] = np.radians(df['latitude'])\ndf['longitude_rad'] = np.radians(df['longitude'])\n# Convert the latitude and longitude to cartesian coordinates\ndf['x'] = np.cos(df['latitude_rad']) * np.cos(df['longitude_rad']) # x = r * cos(lat) * cos(long)\ndf['y'] = np.cos(df['latitude_rad']) * np.sin(df['longitude_rad']) # y = r * cos(lat) * sin(long)\ndf['z'] = np.sin(df['latitude_rad']) # z = r * sin(lat)\n# Create a matrix of the x, y, and z coordinates\nX = df[['x', 'y', 'z']].values",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "df['latitude_rad']",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "df['latitude_rad'] = np.radians(df['latitude'])\ndf['longitude_rad'] = np.radians(df['longitude'])\n# Convert the latitude and longitude to cartesian coordinates\ndf['x'] = np.cos(df['latitude_rad']) * np.cos(df['longitude_rad']) # x = r * cos(lat) * cos(long)\ndf['y'] = np.cos(df['latitude_rad']) * np.sin(df['longitude_rad']) # y = r * cos(lat) * sin(long)\ndf['z'] = np.sin(df['latitude_rad']) # z = r * sin(lat)\n# Create a matrix of the x, y, and z coordinates\nX = df[['x', 'y', 'z']].values\nprint(f'The shape of the matrix is: {X.shape}')\n# Scale the data to have a mean of 0 and a standard deviation of 1",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "df['longitude_rad']",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "df['longitude_rad'] = np.radians(df['longitude'])\n# Convert the latitude and longitude to cartesian coordinates\ndf['x'] = np.cos(df['latitude_rad']) * np.cos(df['longitude_rad']) # x = r * cos(lat) * cos(long)\ndf['y'] = np.cos(df['latitude_rad']) * np.sin(df['longitude_rad']) # y = r * cos(lat) * sin(long)\ndf['z'] = np.sin(df['latitude_rad']) # z = r * sin(lat)\n# Create a matrix of the x, y, and z coordinates\nX = df[['x', 'y', 'z']].values\nprint(f'The shape of the matrix is: {X.shape}')\n# Scale the data to have a mean of 0 and a standard deviation of 1\nscaler = StandardScaler()",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "df['x']",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "df['x'] = np.cos(df['latitude_rad']) * np.cos(df['longitude_rad']) # x = r * cos(lat) * cos(long)\ndf['y'] = np.cos(df['latitude_rad']) * np.sin(df['longitude_rad']) # y = r * cos(lat) * sin(long)\ndf['z'] = np.sin(df['latitude_rad']) # z = r * sin(lat)\n# Create a matrix of the x, y, and z coordinates\nX = df[['x', 'y', 'z']].values\nprint(f'The shape of the matrix is: {X.shape}')\n# Scale the data to have a mean of 0 and a standard deviation of 1\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\nprint(f'Calculating the distance matrix...')",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "df['y']",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "df['y'] = np.cos(df['latitude_rad']) * np.sin(df['longitude_rad']) # y = r * cos(lat) * sin(long)\ndf['z'] = np.sin(df['latitude_rad']) # z = r * sin(lat)\n# Create a matrix of the x, y, and z coordinates\nX = df[['x', 'y', 'z']].values\nprint(f'The shape of the matrix is: {X.shape}')\n# Scale the data to have a mean of 0 and a standard deviation of 1\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\nprint(f'Calculating the distance matrix...')\n# Calculate the condensed distance matrix",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "df['z']",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "df['z'] = np.sin(df['latitude_rad']) # z = r * sin(lat)\n# Create a matrix of the x, y, and z coordinates\nX = df[['x', 'y', 'z']].values\nprint(f'The shape of the matrix is: {X.shape}')\n# Scale the data to have a mean of 0 and a standard deviation of 1\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\nprint(f'Calculating the distance matrix...')\n# Calculate the condensed distance matrix\ndistances = pdist(X_scaled)",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "X = df[['x', 'y', 'z']].values\nprint(f'The shape of the matrix is: {X.shape}')\n# Scale the data to have a mean of 0 and a standard deviation of 1\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\nprint(f'Calculating the distance matrix...')\n# Calculate the condensed distance matrix\ndistances = pdist(X_scaled)\n# Calculate the distance to the kth nearest neighbor for each point\nk = 5",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "scaler",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "scaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\nprint(f'Calculating the distance matrix...')\n# Calculate the condensed distance matrix\ndistances = pdist(X_scaled)\n# Calculate the distance to the kth nearest neighbor for each point\nk = 5\nprint(f'Calculating the distance to the {k}th nearest neighbor for each point...')\nneigh = NearestNeighbors(n_neighbors=k)\nnbrs = neigh.fit(X_scaled)",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "X_scaled",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "X_scaled = scaler.fit_transform(X)\nprint(f'Calculating the distance matrix...')\n# Calculate the condensed distance matrix\ndistances = pdist(X_scaled)\n# Calculate the distance to the kth nearest neighbor for each point\nk = 5\nprint(f'Calculating the distance to the {k}th nearest neighbor for each point...')\nneigh = NearestNeighbors(n_neighbors=k)\nnbrs = neigh.fit(X_scaled)\ndistances_k, indices_k = nbrs.kneighbors(X_scaled)",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "distances",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "distances = pdist(X_scaled)\n# Calculate the distance to the kth nearest neighbor for each point\nk = 5\nprint(f'Calculating the distance to the {k}th nearest neighbor for each point...')\nneigh = NearestNeighbors(n_neighbors=k)\nnbrs = neigh.fit(X_scaled)\ndistances_k, indices_k = nbrs.kneighbors(X_scaled)\ndistances_k = distances_k[:, k-1]\n# Plot a histogram of the distances to the kth nearest neighbor\nplt.hist(distances_k, bins=50)",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "k = 5\nprint(f'Calculating the distance to the {k}th nearest neighbor for each point...')\nneigh = NearestNeighbors(n_neighbors=k)\nnbrs = neigh.fit(X_scaled)\ndistances_k, indices_k = nbrs.kneighbors(X_scaled)\ndistances_k = distances_k[:, k-1]\n# Plot a histogram of the distances to the kth nearest neighbor\nplt.hist(distances_k, bins=50)\nplt.xlabel('Distance')\nplt.ylabel('Frequency')",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "neigh",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "neigh = NearestNeighbors(n_neighbors=k)\nnbrs = neigh.fit(X_scaled)\ndistances_k, indices_k = nbrs.kneighbors(X_scaled)\ndistances_k = distances_k[:, k-1]\n# Plot a histogram of the distances to the kth nearest neighbor\nplt.hist(distances_k, bins=50)\nplt.xlabel('Distance')\nplt.ylabel('Frequency')\nplt.title('Histogram of Distances to the 5th Nearest Neighbors')\n# save the figure as a .png file in the project_folder/reports folder with the name 'knn_histogram.png'",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "nbrs",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "nbrs = neigh.fit(X_scaled)\ndistances_k, indices_k = nbrs.kneighbors(X_scaled)\ndistances_k = distances_k[:, k-1]\n# Plot a histogram of the distances to the kth nearest neighbor\nplt.hist(distances_k, bins=50)\nplt.xlabel('Distance')\nplt.ylabel('Frequency')\nplt.title('Histogram of Distances to the 5th Nearest Neighbors')\n# save the figure as a .png file in the project_folder/reports folder with the name 'knn_histogram.png'\nplt.savefig('./project_folder/reports/knn_histogram.png')",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "distances_k",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "distances_k = distances_k[:, k-1]\n# Plot a histogram of the distances to the kth nearest neighbor\nplt.hist(distances_k, bins=50)\nplt.xlabel('Distance')\nplt.ylabel('Frequency')\nplt.title('Histogram of Distances to the 5th Nearest Neighbors')\n# save the figure as a .png file in the project_folder/reports folder with the name 'knn_histogram.png'\nplt.savefig('./project_folder/reports/knn_histogram.png')\nplt.show()\n# Choose a value for eps",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "eps",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "eps = 0.5\n# Run the DBSCAN algorithm\ndb = DBSCAN(eps=eps, min_samples=2, metric='precomputed')\ndb.fit(squareform(distances))\n# Calculate the silhouette score\nscore = silhouette_score(squareform(distances), db.labels_)\n# Calculate the Calinski-Harabasz score\nscore = calinski_harabasz_score(squareform(distances), db.labels_)\n# Print the cluster labels\nprint(db.labels_)",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "db = DBSCAN(eps=eps, min_samples=2, metric='precomputed')\ndb.fit(squareform(distances))\n# Calculate the silhouette score\nscore = silhouette_score(squareform(distances), db.labels_)\n# Calculate the Calinski-Harabasz score\nscore = calinski_harabasz_score(squareform(distances), db.labels_)\n# Print the cluster labels\nprint(db.labels_)",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "score",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "score = silhouette_score(squareform(distances), db.labels_)\n# Calculate the Calinski-Harabasz score\nscore = calinski_harabasz_score(squareform(distances), db.labels_)\n# Print the cluster labels\nprint(db.labels_)",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "score",
        "kind": 5,
        "importPath": "project_folder.src.dbscan",
        "description": "project_folder.src.dbscan",
        "peekOfCode": "score = calinski_harabasz_score(squareform(distances), db.labels_)\n# Print the cluster labels\nprint(db.labels_)",
        "detail": "project_folder.src.dbscan",
        "documentation": {}
    },
    {
        "label": "create_folder_structure",
        "kind": 2,
        "importPath": "project_setup",
        "description": "project_setup",
        "peekOfCode": "def create_folder_structure():\n    project_folder = 'project_folder'\n    data_folder = 'data'\n    raw_folder = 'raw'\n    processed_folder = 'processed'\n    external_folder = 'external'\n    models_folder = 'models'\n    notebooks_folder = 'notebooks'\n    reports_folder = 'reports'\n    src_folder = 'src'",
        "detail": "project_setup",
        "documentation": {}
    }
]